{"version":3,"sources":["assets/img/logo.png","assets/img/card_1.jpg","assets/img sync /^/.//cover_.*/.jpg$","assets/img/cover_1.jpg","assets/img/cover_2.jpg","assets/img/cover_3.jpg","assets/img/cover_4.jpg","assets/img/cover_5.jpg","redux/reducers/UserReducer.js","redux/reducers/PostReducer.js","redux/reducers/BookmarkReducer.js","redux/reducers/NotificationReducer.js","redux/reducers/HistoryReducer.js","redux/reducers/index.js","redux/actions/types.js","redux/store/index.js","utils/helpers.js","utils/session.js","utils/api.js","redux/actions/NotificationActions.js","redux/actions/UserActions.js","layouts/AppHeader.js","layouts/AppSidebar.js","layouts/AppFooter.js","layouts/index.js","components/ReactionIcon/index.js","components/Comment/CommentItem.js","redux/actions/CommentActions.js","components/Comment/index.js","config.js","redux/actions/PostActions.js","redux/actions/BookmarkActions.js","components/Post/index.js","utils/imgur.js","components/Form/PostForm.js","components/MetaTags/index.js","components/RightSidebar/index.js","routes/home/index.js","routes/post/index.js","routes/user/UserForm.js","routes/user/index.js","routes/bookmark/index.js","routes/notification/index.js","routes/history/LikedPosts.js","redux/actions/HistoryActions.js","routes/history/Downloaded.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","INIT_STATE","authUser","currentUser","posts","currentPost","pagination","current","total","totalPages","perPage","bookmarks","notifications","unread","liked","downloaded","rootReducer","combineReducers","user","state","action","type","payload","updatedUser","assign","_id","toString","post","likes","dislikes","downloads","reaction","pages","isRemove","currentPosts","index","_","findIndex","item","updatedPost","filter","bookmark","record","records","isMobile","currentBookmarks","notification","is_read","history","store","createStore","applyMiddleware","thunkMiddleware","processTime","timestamp","now","moment","duration","diff","hours","Math","ceil","asHours","minutes","asMinutes","date","format","cleanObject","obj","propName","getCookie","cname","name","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","api","axios","create","baseURL","timeout","headers","interceptors","request","use","config","token","common","error","Promise","reject","getAllNotifications","query","dispatch","get","params","then","res","data","catch","err","console","response","markNotificationAsRead","put","markAllAsRead","countUnread","signIn","cvalue","exdays","d","Date","setTime","getTime","expires","toUTCString","setCookie","updateUserDetail","log","logout","removeCookie","Header","Layout","Search","Input","confirm","Modal","pusher","window","Pusher","cluster","AppHeader","userActions","icon","SmileOutlined","redirectToProfilePage","LogoutOutlined","onLogout","visibleDrawer","this","props","nextProps","component","subscribe","bind","page","isOpen","setState","value","toggleDrawer","push","pathname","search","qs","stringify","keyword","location","href","title","content","cancelText","okText","onOk","parse","slice","style","backgroundColor","justify","className","shape","size","src","require","defaultValue","placeholder","onSearch","placement","dataLength","next","fetchMoreNotifications","hasMore","loader","height","LikeOutlined","comment","creator","DislikeOutlined","MessageOutlined","SisternodeOutlined","Item","key","Meta","avatar","description","created_at","status","onClick","color","count","BellOutlined","header","footer","bordered","dataSource","renderItem","UserOutlined","MenuFoldOutlined","closable","onClose","visible","Text","to","AppstoreTwoTone","twoToneColor","Fragment","BellTwoTone","HeartTwoTone","SnippetsTwoTone","BookTwoTone","Component","withRouter","connect","Sider","AppSidebar","isAuthenticated","responseFacebook","responseGoogle","auth_id","profileObj","googleId","imageUrl","email","login_type","theme","Title","level","appId","autoLoad","fields","callback","textButton","clientId","buttonText","onSuccess","onFailure","cookiePolicy","Footer","AppFooter","Content","AppLayout","getAuthUser","children","visibility","primaryColor","ReactionIcon","reacted","onClickReactionIcon","onReact","handleVisibleChange","text","textColor","LikeFilled","DislikeFilled","trigger","dur","v","danger","onVisibleChange","CommentItem","isShowReplies","currentReplies","child_comments","isShowAllComments","reactComment","toggleShowReplies","onReply","actions","onReactComment","author","ReactHtmlParser","datetime","CommentList","isOpenCreateForm","comments","currentComment","getAllComments","preventDefault","createComment","parent_comment","commentList","collapseComment","displayedComments","max","onToggleModal","onToggleShowComments","itemLayout","child","onCancel","submit","onChange","modules","formats","getAllPosts","createBookmark","Card","radioStyle","display","lineHeight","Post","postMoreActions","BookOutlined","onBookmark","StopOutlined","toggleReportModal","isShowCommentList","isLoadingDownload","isOpenReportModal","isOpenUpdateModal","reportValue","postContent","FormOutlined","toggleUpdateModal","DeleteOutlined","onDelete","reactPost","downloadFile","message","post_id","success","target","reportPost","reason","updatePostDetail","deletePost","likeNumber","dislikeNumber","downloadNumber","actionButtons","toggleShowComments","FacebookShareButton","url","appConfig","ShareAltOutlined","file_id","onDownload","LoadingOutlined","CloudDownloadOutlined","strong","ClockCircleOutlined","updated_at","EllipsisOutlined","FileProtectOutlined","fontSize","file_name","images","countFrom","renderOverlay","LikeTwoTone","DislikeTwoTone","Comment","onReport","Group","onChangeReportValue","onUpdate","onChangePostContent","toolbar","responseType","FileSaver","saveAs","delete","uploadImage","file","FormData","append","set","Authorization","link","PostForm","isLoading","isFocused","fileList","imageList","postType","onChangeImage","onChangeFile","warning","range","source","editor","submitData","originFileObj","requests","all","JSON","createPost","onFocus","onFocusEditor","accept","multiple","beforeUpload","listType","PictureTwoTone","FileTwoTone","loading","onSubmit","MetaTags","ogTitle","Helmet","charSet","http-equiv","property","RightSidebar","data-href","data-tabs","data-width","data-height","data-small-header","data-adapt-container-width","data-hide-cover","data-show-facepile","cite","hoverable","cover","alt","Home","gutter","xs","sm","md","lg","xl","paragraph","rows","fetchMorePosts","showIcon","PostDetail","getPostDetail","match","UserForm","values","layout","initialValues","onFinish","label","rules","required","TextArea","htmlType","User","uploadRef","React","createRef","isUpdateAvatarLoading","isOpenUpdateForm","getUserDetail","click","result","isMyProfile","autoplay","openChangeAvatar","EditOutlined","toggleUpdateForm","onChangeAvatar","ref","Bookmark","getAllBookmarks","setTimeout","deleteBookmark","isBrowser","Truncate","lines","ellipsis","pageSize","onChangeFilter","fetchMore","Notification","LikedPosts","getListLiked","Downloaded","getListDownloaded","routes","path","Routes","route","exact","App","basename","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82bb3489.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a526f250.png\";","module.exports = __webpack_public_path__ + \"static/media/card_1.0d73cd00.jpg\";","var map = {\n\t\"./cover_1.jpg\": 662,\n\t\"./cover_2.jpg\": 663,\n\t\"./cover_3.jpg\": 664,\n\t\"./cover_4.jpg\": 665,\n\t\"./cover_5.jpg\": 666\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 661;","module.exports = __webpack_public_path__ + \"static/media/cover_1.e65fe284.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover_2.7c31d188.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover_3.bbe9108b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover_4.649d92bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover_5.d9a05716.jpg\";","import {\n    SIGN_IN,\n    GET_AUTH_USER,\n    GET_USER_DETAIL,\n    UPDATE_USER_DETAIL,\n    LOGOUT_USER\n} from '../actions/types';\n\nconst INIT_STATE = {\n    authUser: null,\n    currentUser: null\n};\n\nexport default (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case SIGN_IN: {\n            return { ...state, authUser: action.payload };\n        }\n        case GET_AUTH_USER: {\n            return { ...state, authUser: action.payload };\n        }\n        case GET_USER_DETAIL: {\n            return { ...state, currentUser: action.payload };\n        }\n        case UPDATE_USER_DETAIL: {\n            let updatedUser = action.payload;\n            let user = Object.assign({}, state.authUser);\n            user = { ...user, ...updatedUser }\n\n            if (state.currentUser && state.authUser._id.toString() == state.currentUser._id.toString()) {\n                let current = Object.assign({}, state.currentUser);\n                \n                current = { ...current, ...updatedUser}\n\n                return { ...state, authUser: user, currentUser: current };\n            } else {\n                return { ...state, authUser: user };\n            }\n\n\n        }\n        case LOGOUT_USER: {\n            return { ...state, authUser: null };\n        }\n        default: {\n            return { ...state };\n        }\n    }\n}","import _ from 'lodash';\nimport {\n    CREATE_POST,\n    GET_ALL_POSTS,\n    REACTION_POST,\n    GET_POST_DETAIL,\n    DOWNLOAD_FILE,\n    UPDATE_POST_CONTENT,\n    BOOKMARK_POST,\n    REPORT_POST,\n    DELETE_POST\n} from '../actions/types';\n\nconst INIT_STATE = {\n    posts: [],\n    currentPost: null,\n    pagination: {\n        current: 1,\n        total: 0,\n        totalPages: 0,\n        perPage: 0\n    }\n};\n\nexport default (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case CREATE_POST: {\n            let posts = [...state.posts];\n            posts = [\n                {\n                    ...action.payload,\n                    likes: 0,\n                    dislikes: 0,\n                    downloads: 0,\n                    reaction: null\n                },\n                ...posts\n            ]\n\n            return {\n                ...state,\n                posts: posts\n            };\n        }\n        case GET_ALL_POSTS: {\n            let posts = [...action.payload.posts];  // for first page\n            if (action.payload.current > 1) {\n                posts = [...state.posts, ...action.payload.posts]\n            }\n            return {\n                ...state,\n                posts: posts,\n                pagination: {\n                    current: action.payload.current,\n                    total: action.payload.total,\n                    totalPages: action.payload.pages,\n                    perPage: action.payload.perPage\n                }\n            };\n        }\n        case REACTION_POST: {\n            let { reaction, isRemove } = action.payload;\n\n            let currentPosts = [...state.posts];\n\n            let index = _.findIndex(state.posts, (item) => {\n                return item._id.toString() == reaction.post.toString();\n            })\n\n            if (isRemove) {\n                if (reaction.type == 'like') currentPosts[index].likes -= 1;\n                else currentPosts[index].dislikes -= 1;\n\n                currentPosts[index].reaction = null;\n            } else {\n                if (reaction.type == 'like') {\n                    currentPosts[index].likes += 1;\n                    if (currentPosts[index].reaction == 'dislike') currentPosts[index].dislikes -= 1;\n                } else {\n                    currentPosts[index].dislikes += 1;\n                    if (currentPosts[index].reaction == 'like') currentPosts[index].likes -= 1;\n                }\n\n                currentPosts[index].reaction = reaction.type; // update new reaction\n            }\n\n            if (state.currentPost) {\n                return { ...state, posts: currentPosts, currentPost: currentPosts[index] };\n            } else {\n                return { ...state, posts: currentPosts };\n            }\n        }\n        case GET_POST_DETAIL: {\n            return {\n                ...state,\n                currentPost: action.payload.post\n            };\n        }\n        case UPDATE_POST_CONTENT: {\n            let updatedPost = action.payload.post;\n            let currentPosts = [...state.posts];\n\n            let index = _.findIndex(state.posts, (item) => {\n                return item._id.toString() == updatedPost._id.toString();\n            })\n\n            currentPosts[index] = { ...currentPosts[index], ...updatedPost };\n\n            if (state.currentPost) {\n                return { ...state, posts: currentPosts, currentPost: currentPosts[index] };\n            } else {\n                return { ...state, posts: currentPosts };\n            }\n        }\n        case DOWNLOAD_FILE: {\n            let currentPosts = [...state.posts];\n\n            let index = _.findIndex(state.posts, (item) => {\n                return item._id.toString() == action.payload.toString();\n            })\n\n            currentPosts[index].downloads += 1;\n\n            if (state.currentPost) {\n                return { ...state, posts: currentPosts, currentPost: currentPosts[index] };\n            } else {\n                return { ...state, posts: currentPosts };\n            }\n        }\n        case BOOKMARK_POST: {\n            return { ...state };\n        }\n        case REPORT_POST: {\n            return { ...state };\n        }\n        case DELETE_POST: {\n            let currentPosts = [...state.posts];\n\n            let posts = currentPosts.filter((item) => {\n                return item._id.toString() != action.payload.toString();\n            })\n\n            if (state.currentPost._id.toString() == action.payload.toString()) {\n                return { ...state, posts: posts, currentPost: null };\n            } else {\n                return { ...state, posts: posts };\n            }\n        }\n        default: {\n            return { ...state };\n        }\n    }\n}","import _ from 'lodash';\nimport {\n    CREATE_BOOKMARK,\n    GET_ALL_BOOKMARKS,\n    GET_ALL_BOOKMARKS_WITHOUT_PAGINATION,\n    DELETE_BOOKMARK\n} from '../actions/types';\nimport {\n    isBrowser,\n    isMobile\n} from \"react-device-detect\";\n\nconst INIT_STATE = {\n    bookmarks: [],\n    pagination: {\n        current: 1,\n        total: 0,\n        totalPages: 0,\n        perPage: 0\n    }\n};\n\nexport default (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case CREATE_BOOKMARK: {\n            let bookmarks = [...state.bookmarks];\n            \n            bookmarks = [\n                action.payload.record,\n                ...bookmarks\n            ]\n\n            return {\n                ...state,\n                bookmarks: bookmarks\n            };\n        }\n        case GET_ALL_BOOKMARKS: {\n            let bookmarks = [...action.payload.records];\n\n            if(isMobile) {\n                if(action.payload.current > 1) bookmarks = [...state.bookmarks, ...action.payload.records]\n            }\n            \n            return {\n                ...state,\n                bookmarks: bookmarks,\n                pagination: {\n                    current: action.payload.current,\n                    total: action.payload.total,\n                    totalPages: action.payload.pages,\n                    perPage: action.payload.perPage\n                }\n            };\n        }\n        case DELETE_BOOKMARK: {\n            let currentBookmarks = [...state.bookmarks];\n\n            let bookmarks = currentBookmarks.filter((item) => {\n                return item._id.toString() != action.payload.toString();\n            })\n\n            return { ...state, bookmarks: bookmarks };\n        }\n        default: {\n            return { ...state };\n        }\n    }\n}","import _ from 'lodash';\nimport {\n    GET_ALL_NOTIFICATIONS,\n    MARK_ALL_AS_READ,\n    MARK_NOTIFICATION_AS_READ,\n    COUNT_UNREAD\n} from '../actions/types';\n\nconst INIT_STATE = {\n    notifications: [],\n    unread: 0,\n    pagination: {\n        current: 1,\n        total: 0,\n        totalPages: 0,\n        perPage: 0\n    }\n};\n\nexport default (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case GET_ALL_NOTIFICATIONS: {\n            let notifications = [...action.payload.notifications];  // for first page\n            if (action.payload.current > 1) {\n                notifications = [...state.notifications, ...action.payload.notifications]\n            }\n\n            return {\n                ...state,\n                notifications: notifications,\n                pagination: {\n                    current: action.payload.current,\n                    total: action.payload.total,\n                    totalPages: action.payload.pages,\n                    perPage: action.payload.perPage\n                }\n            };\n        }\n        case MARK_ALL_AS_READ: {\n            let notifications = [...state.notifications];\n            notifications = notifications.map(item => {\n                item.is_read = true;\n                return item;\n            })\n\n            return {\n                ...state,\n                unread: 0,\n                notifications: notifications,\n            }\n        }\n        case MARK_NOTIFICATION_AS_READ: {\n            let notifications = [...state.notifications];\n            let index = _.findIndex(notifications, (item) => {\n                return item._id.toString() == action.payload.toString();\n            });\n            notifications[index].is_read = true;\n\n            return {\n                ...state,\n                unread: state.unread - 1,\n                notifications: notifications,\n            }\n        }\n        case COUNT_UNREAD: {\n            return { ...state, unread: action.payload }\n        }\n        default: {\n            return { ...state };\n        }\n    }\n}","import _ from 'lodash';\nimport {\n    GET_LIST_LIKED,\n    GET_LIST_DOWNLOADED\n} from '../actions/types';\nimport {\n    isBrowser,\n    isMobile\n} from \"react-device-detect\";\n\nconst INIT_STATE = {\n    liked: {\n        posts: [],\n        pagination: {\n            current: 1,\n            total: 0,\n            totalPages: 0,\n            perPage: 0\n        }\n    },\n    downloaded: {\n        posts: [],\n        pagination: {\n            current: 1,\n            total: 0,\n            totalPages: 0,\n            perPage: 0\n        }\n    }\n};\n\nexport default (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case GET_LIST_LIKED: {\n            let posts = [...action.payload.posts];\n\n            if(isMobile) {\n                if(action.payload.current > 1) posts = [...state.liked.posts, ...action.payload.posts]\n            }\n            \n            return {\n                ...state,\n                liked: {\n                    posts: posts,\n                    pagination: {\n                        current: action.payload.current,\n                        total: action.payload.total,\n                        totalPages: action.payload.pages,\n                        perPage: action.payload.perPage\n                    }\n                }\n            };\n        }\n        case GET_LIST_DOWNLOADED: {\n            let posts = [...action.payload.posts];\n\n            if(isMobile) {\n                if(action.payload.current > 1) posts = [...state.downloaded.posts, ...action.payload.posts]\n            }\n            \n            return {\n                ...state,\n                downloaded: {\n                    posts: posts,\n                    pagination: {\n                        current: action.payload.current,\n                        total: action.payload.total,\n                        totalPages: action.payload.pages,\n                        perPage: action.payload.perPage\n                    }\n                }\n            };\n        }\n        default: {\n            return { ...state };\n        }\n    }\n}","import {combineReducers} from 'redux';\nimport UserReducer from './UserReducer';\nimport PostReducer from './PostReducer';\nimport BookmarkReducer from './BookmarkReducer';\nimport NotificationReducer from './NotificationReducer';\nimport HistoryReducer from './HistoryReducer';\n\nconst rootReducer = combineReducers({\n    user: UserReducer,\n    post: PostReducer,\n    bookmark: BookmarkReducer,\n    notification: NotificationReducer,\n    history: HistoryReducer\n});\n\nexport default rootReducer;","// user\nexport const SIGN_IN = 'SIGN_IN';\nexport const GET_AUTH_USER = 'GET_AUTH_USER';\nexport const GET_USER_DETAIL = 'GET_USER_DETAIL';\nexport const UPDATE_USER_DETAIL = 'UPDATE_USER_DETAIL';\nexport const LOGOUT_USER = 'LOGOUT_USER';\n\n// post\nexport const CREATE_POST = 'CREATE_POST';\nexport const GET_ALL_POSTS = 'GET_ALL_POSTS';\nexport const REACTION_POST = 'REACTION_POST';\nexport const GET_POST_DETAIL = 'GET_POST_DETAIL';\nexport const UPDATE_POST_CONTENT = 'UPDATE_POST_CONTENT';\nexport const DOWNLOAD_FILE = 'DOWNLOAD_FILE';\nexport const BOOKMARK_POST = 'BOOKMARK_POST';\nexport const REPORT_POST = 'REPORT_POST';\nexport const DELETE_POST = 'DELETE_POST';\nexport const GET_LIST_LIKED = 'GET_LIST_LIKED';\nexport const GET_LIST_DOWNLOADED = 'GET_LIST_DOWNLOADED';\n\n// comment\nexport const CREATE_COMMENT = 'CREATE_COMMENT';\nexport const GET_ALL_COMMENTS = 'GET_ALL_COMMENTS';\nexport const REACTION_COMMENT = 'REACTION_COMMENT';\n\n// bookmark\nexport const GET_ALL_BOOKMARKS  = 'GET_ALL_BOOKMARKS';\nexport const GET_ALL_BOOKMARKS_WITHOUT_PAGINATION = 'GET_ALL_BOOKMARKS_WITHOUT_PAGINATION';\nexport const CREATE_BOOKMARK = 'CREATE_BOOKMARK';\nexport const DELETE_BOOKMARK = 'DELETE_BOOKMARK';\n\n// notifications\nexport const GET_ALL_NOTIFICATIONS  = 'GET_ALL_NOTIFICATIONS';\nexport const MARK_NOTIFICATION_AS_READ = 'MARK_NOTIFICATION_AS_READ';\nexport const MARK_ALL_AS_READ = 'MARK_ALL_AS_READ';\nexport const COUNT_UNREAD = 'COUNT_UNREAD';","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from '../reducers/index';\nimport thunkMiddleware from \"redux-thunk\";\n\n// Create store\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// let createStoreWithMiddleware = applyMiddleware(thunkMiddleware)(createStore);\n// const store = createStoreWithMiddleware(rootReducer,\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import moment from 'moment';\n\nexport function processTime(timestamp) {\n    let now = moment();\n    \n    let duration = moment.duration(now.diff(moment(timestamp)));\n    let hours = Math.ceil(duration.asHours());\n    let minutes = Math.ceil(duration.asMinutes());\n\n    let date = moment(timestamp).format('HH:mm DD/MM/YYYY');\n    if (hours <= 23) date = `${hours} giờ trước`;\n    if (minutes < 60) date = `${minutes} phút trước`;\n    if (minutes < 2) date = `Vừa xong`;\n\n    return date;\n}\n\nexport function cleanObject (obj) {\n    for (var propName in obj) {\n        if (!propName || !obj[propName]) {\n            delete obj[propName];\n        }\n    }\n    return obj;\n}","// set cookie\nexport function setCookie(cname, cvalue, exdays) {\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n    var expires = d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";expires=\" + expires + \";path=/\";\n}\n\n// get cookie\nexport function getCookie(cname) {\n    // var d = new Date();\n    // return new Promise((resolve, reject) => {\n        var name = cname + \"=\";\n        var ca = document.cookie.split(';');\n        for(var i = 0; i < ca.length; i++) {\n            var c = ca[i];\n            while (c.charAt(0) == ' ') {\n                c = c.substring(1);\n            }\n            if (c.indexOf(name) == 0) {\n                return c.substring(name.length, c.length);\n            }\n        }\n        return \"\";\n    // })\n}\n\n// delete cookie\nexport function removeCookie(cname) {\n    var cvalue = getCookie(cname);\n    var d = new Date();\n    d.setTime(d.getTime() - (24 * 60 * 60 * 1000)); // reduce 1 day\n    var expires = d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";expires=\" + expires + \";path=/;\"; \n}","import axios from 'axios';\nimport { getCookie } from './session';\n\nconst api = axios.create({\n    baseURL: 'http://localhost:3000',\n    // baseURL: 'https://secure-castle-90760.herokuapp.com',\n    timeout: 10000,\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': '*/*'\n    }\n});\n\napi.interceptors.request.use(function (config) {\n    const token = getCookie('bkgallery_token');\n    // Do something before request is sent\n    if (token) {\n        config.headers.common['token'] = token\n    }\n    return config;\n}, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n});\n\nexport default api;","import api from '../../utils/api';\nimport {\n    GET_ALL_NOTIFICATIONS,\n    MARK_ALL_AS_READ,\n    MARK_NOTIFICATION_AS_READ,\n    COUNT_UNREAD\n} from './types';\n\nexport const getAllNotifications = (query) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.get('/notifications', {params: query}).then(res => {\n            dispatch({ type: GET_ALL_NOTIFICATIONS, payload: res.data });\n            resolve(res.data)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const markNotificationAsRead = (id) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.put(`/notifications/${id}`).then(res => {\n            dispatch({ type: MARK_NOTIFICATION_AS_READ, payload: id });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const markAllAsRead = (id) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.put(`/notifications`).then(res => {\n            dispatch({ type: MARK_ALL_AS_READ });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const countUnread = (id) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.get(`/notifications/unread`).then(res => {\n            dispatch({ type: COUNT_UNREAD, payload: res.data.total });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}","import api from '../../utils/api';\nimport {\n    SIGN_IN,\n    GET_USER_DETAIL,\n    GET_AUTH_USER,\n    UPDATE_USER_DETAIL,\n    LOGOUT_USER\n} from './types';\nimport { setCookie, removeCookie, getCookie } from '../../utils/session';\n\nexport const signIn = (data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.post('/users/signin', data).then(res => {\n            setCookie('bkgallery_token', res.data.token, 30);\n\n            dispatch({ type: SIGN_IN, payload: res.data.user });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const getAuthUser = (data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.get('/users/auth').then(res => {\n            dispatch({ type: GET_AUTH_USER, payload: res.data.user });\n            resolve(true)\n        }).catch(err => {\n            console.log(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const getUserDetail = (id) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.get(`/users/${id}`).then(res => {\n            dispatch({ type: GET_USER_DETAIL, payload: res.data.user });\n            resolve(true)\n        }).catch(err => {\n            console.log(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const updateUserDetail = (id, data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.put(`/users/${id}`, data).then(res => {\n            console.log(res.data.user)\n            dispatch({ type: UPDATE_USER_DETAIL, payload: res.data.user });\n            resolve(true)\n        }).catch(err => {\n            console.log(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const logout = () => dispatch => {\n    return new Promise((resolve, reject) => {\n       removeCookie('bkgallery_token');\n       dispatch({ type: LOGOUT_USER });\n       resolve(true);\n    })\n }\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { Layout, Modal, Drawer, Button, Avatar, Row, Col, Typography, Input, Divider, Popover, List, Spin, Badge, Tooltip } from 'antd';\nimport {\n    MenuFoldOutlined,\n    UserOutlined,\n    BellOutlined,\n    HeartTwoTone,\n    SnippetsTwoTone,\n    BookTwoTone,\n    BellTwoTone,\n    SmileOutlined,\n    LogoutOutlined,\n    LikeOutlined,\n    DislikeOutlined,\n    MessageOutlined,\n    SisternodeOutlined,\n    AppstoreTwoTone\n} from '@ant-design/icons';\nimport qs from 'qs';\nimport { cleanObject, processTime } from '../utils/helpers';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n// actions\nimport { getAllNotifications, countUnread, markAllAsRead, markNotificationAsRead } from '../redux/actions/NotificationActions';\nimport { logout } from '../redux/actions/UserActions';\n\nconst { Header } = Layout;\nconst { Search } = Input;\nconst { confirm } = Modal;\n\nconst pusher = new window.Pusher('f3504a17049e9513ffc4', {\n    cluster: 'ap1'\n});\n\nclass AppHeader extends Component {\n    userActions = [\n        {\n            icon: <SmileOutlined />,\n            name: \"Trang cá nhân\",\n            action: () => this.redirectToProfilePage()\n        },\n        {\n            icon: <LogoutOutlined />,\n            name: \"Đăng xuất\",\n            action: () => this.onLogout()\n        },\n    ]\n\n    state = {\n        visibleDrawer: false\n    }\n\n    async componentDidMount() {\n        await this.props.getAllNotifications();\n        await this.props.countUnread();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (nextProps.user && nextProps.user != this.props.user) {\n            const component = this;\n            var channel = pusher.subscribe(`bkgallery-${nextProps.user._id}`);\n            channel.bind('new-notification', function (data) {\n                component.props.getAllNotifications();\n            });\n        }\n    }\n\n    fetchMoreNotifications() {\n        this.props.getAllNotifications({ page: this.props.pagination.current + 1 });\n    }\n\n    toggleDrawer(isOpen) {\n        this.setState({ visibleDrawer: isOpen })\n    }\n\n    onSearch(value) {\n        this.toggleDrawer(false);\n        this.props.history.push({\n            pathname: '/',\n            search: qs.stringify({ keyword: value })\n        });\n    }\n\n    redirectToProfilePage() {\n        window.location.href = `/users/${this.props.user._id}`;\n    }\n\n    onLogout() {\n        confirm({\n            title: 'Cảnh báo',\n            content: 'Bạn muốn đăng xuất khỏi BK Gallery?',\n            cancelText: 'Huỷ',\n            okText: 'Đăng xuất',\n            onOk: () => this.props.logout()\n        });\n\n        this.toggleDrawer(false);\n    }\n\n    render() {\n        var { user, notifications, pagination, unread } = this.props;\n        var { visibleDrawer } = this.state;\n\n        let query = qs.parse(this.props.location.search.slice(1));\n        query = cleanObject(query);\n\n        var pathname = this.props.location.pathname;\n\n        return (\n            <Header id=\"custom-header\" style={{ backgroundColor: '#d0021a' }}>\n                <Row justify=\"space-between\">\n                    <Col className=\"d-flex justify-content-between align-items-center\">\n                        <div className=\"logo\">\n                            <a href=\"/\">\n                                <Avatar shape=\"square\" size={40} src={require('../assets/img/logo.png')} />\n                            </a>\n                        </div>\n                        <Search\n                            defaultValue={query.keyword || ''}\n                            className=\"custom-searchbox ml-4\"\n                            placeholder=\"Tìm kiếm...\"\n                            onSearch={value => this.onSearch(value)}\n                        />\n                    </Col>\n                    {\n                        user ? (\n                            <Col id=\"custom-desktop-menu\">\n                                <Popover\n                                    placement=\"bottomRight\"\n                                    content={\n                                        <div>\n                                            <InfiniteScroll\n                                                className=\"notification-list\"\n                                                dataLength={pagination.perPage * pagination.current}\n                                                next={() => this.fetchMoreNotifications()}\n                                                hasMore={pagination.current < pagination.totalPages}\n                                                loader={<div className=\"text-center\"><Spin size=\"large\" /></div>}\n                                                height={350}\n                                            >\n                                                {\n                                                    notifications.map(item => {\n                                                        let content = '';\n                                                        let icon = null;\n                                                        if (item.type == \"like\") {\n                                                            icon = <LikeOutlined />;\n                                                            if (item.comment) content = `${item.creator.name} đã thích bình luận của bạn`;\n                                                            else content = `${item.creator.name} đã thích bài viết của bạn`;\n                                                        } else if (item.type == 'dislike') {\n                                                            icon = <DislikeOutlined />;\n                                                            if (item.comment) content = `${item.creator.name} không thích bình luận của bạn`;\n                                                            else content = `${item.creator.name} không thích bài viết của bạn`;\n                                                        } else if (item.type == 'comment') {\n                                                            icon = <MessageOutlined />;\n                                                            content = `${item.creator.name} đã bình luận về bài viết bạn đang theo dõi`;\n                                                        } else if (item.type == 'reply') {\n                                                            icon = <SisternodeOutlined />;\n                                                            content = `${item.creator.name} đã trả lời bình luận mà bạn đang tham gia hoặc theo dõi`;\n                                                        }\n\n                                                        return (\n                                                            <List.Item key={item._id} className={`d-flex justify-content-between align-items-center notification-items`}>\n                                                                <List.Item.Meta\n                                                                    avatar={<Avatar src={item.creator.avatar} />}\n                                                                    title={<a className=\"text-none notification-content\" href={`/posts/${item.post._id}`}>{content}</a>}\n                                                                    description={<div>{icon} <small>{processTime(item.created_at)}</small></div>}\n                                                                />\n                                                                {item.is_read ? (\n                                                                    <Tooltip title=\"Đã đọc\">\n                                                                        <Badge status=\"default\" />\n                                                                    </Tooltip>\n                                                                ) : (\n                                                                        <Tooltip title=\"Đánh dấu đã đọc\">\n                                                                            <div onClick={() => this.props.markNotificationAsRead(item._id)}>\n                                                                                <Badge color=\"#d0021a\" />\n                                                                            </div>\n                                                                        </Tooltip>\n                                                                    )\n                                                                }\n\n                                                            </List.Item>\n                                                        )\n                                                    })\n                                                }\n                                            </InfiniteScroll>\n                                            <div className=\"text-center\"><Button type=\"link\" className=\"p-0\" onClick={() => this.props.markAllAsRead()}>Đánh dấu tất cả đã đọc</Button></div>\n                                        </div>\n                                    }\n                                    title=\"Thông báo\"\n                                >\n                                    <Button type=\"link\" icon={<Badge count={unread}><BellOutlined className=\"header-icons\" /></Badge>} />\n                                </Popover>\n                                <Popover\n                                    placement=\"bottom\"\n                                    content={\n                                        <List\n                                            size=\"small\"\n                                            header={null}\n                                            footer={null}\n                                            bordered={false}\n                                            dataSource={this.userActions}\n                                            renderItem={item => (\n                                                <List.Item className=\"item-action-btn\" onClick={item.action}>{item.icon} {item.name}</List.Item>\n                                            )}\n                                        />\n                                    }\n                                    title={null}\n                                >\n                                    <Button type=\"link\" icon={<UserOutlined className=\"header-icons\" />} />\n                                </Popover>\n                            </Col>\n                        ) : null\n                    }\n                    <Col id=\"custom-mobile-menu\">\n                        <Button type=\"link\" icon={<MenuFoldOutlined style={{ color: '#fff' }} />} onClick={() => this.toggleDrawer(true)} />\n                    </Col>\n                </Row>\n\n                <Drawer\n                    placement=\"right\"\n                    closable={false}\n                    onClose={() => this.toggleDrawer(false)}\n                    visible={visibleDrawer}\n                >\n                    {\n                        user ? (\n                            <div className=\"d-flex justify-content-start align-items-center sidebar-mobile-items\">\n                                <Avatar src={user.avatar} size={20} />\n                                <Typography.Text className=\"mb-0 ml-2\">{user.name}</Typography.Text>\n                            </div>\n                        ) : null\n                    }\n\n                    <Divider className=\"custom-sidebar-divider\" />\n                    <div className={`d-flex justify-content-start align-items-center sidebar-items ${pathname == `/` ? 'sidebar-items-active' : ''}`}>\n                        <Link to='/' className=\"text-none\" onClick={() => this.toggleDrawer(false)}>\n                            <AppstoreTwoTone twoToneColor=\"#2ecc71\" className=\"sidebar-icon\" />\n                            <Typography.Text className=\"mb-0 ml-2\">Trang chủ</Typography.Text>\n                        </Link>\n                    </div>\n                    {\n                        user ? (\n                            <React.Fragment>\n                                <div className={`d-flex justify-content-start align-items-center sidebar-items ${pathname == `/notifications` ? 'sidebar-items-active' : ''}`} >\n                                    <Link to='/notifications' className=\"text-none\" onClick={() => this.toggleDrawer(false)}>\n                                        <BellTwoTone twoToneColor=\"#f39c12\" className=\"sidebar-icon\" />\n                                        <Typography.Text className=\"mb-0 ml-2\">Thông báo</Typography.Text>\n                                    </Link>\n                                </div>\n                                <div className={`d-flex justify-content-start align-items-center sidebar-items ${pathname == `/history/liked` ? 'sidebar-items-active' : ''}`} >\n                                    <Link to='/history/liked' className=\"text-none\" onClick={() => this.toggleDrawer(false)}>\n                                        <HeartTwoTone twoToneColor=\"#dd1818\" className=\"sidebar-icon\" />\n                                        <Typography.Text className=\"mb-0 ml-2\">Đã thích</Typography.Text>\n                                    </Link>\n                                </div>\n                                <div className={`d-flex justify-content-start align-items-center sidebar-items ${pathname == `/history/downloaded` ? 'sidebar-items-active' : ''}`}>\n                                    <Link to='/history/downloaded' className=\"text-none\" onClick={() => this.toggleDrawer(false)}>\n                                        <SnippetsTwoTone twoToneColor=\"#d35400\" className=\"sidebar-icon\" />\n                                        <Typography.Text className=\"mb-0 ml-2\">Lịch sử tải về</Typography.Text>\n                                    </Link>\n                                </div>\n                                <div className={`d-flex justify-content-start align-items-center sidebar-items ${pathname == `/bookmarks` ? 'sidebar-items-active' : ''}`}>\n                                    <Link to='/bookmarks' className=\"text-none\" onClick={() => this.toggleDrawer(false)}>\n                                        <BookTwoTone twoToneColor=\"#3498db\" className=\"sidebar-icon\" />\n                                        <Typography.Text className=\"mb-0 ml-2\">Lưu trữ</Typography.Text>\n                                    </Link>\n                                </div>\n                                <div className={`d-flex justify-content-start align-items-center sidebar-items`}>\n                                    <div onClick={() => this.onLogout()}>\n                                        <LogoutOutlined className=\"sidebar-icon\" />\n                                        <Typography.Text className=\"mb-0 ml-2\">Đăng xuất</Typography.Text>\n                                    </div>\n                                </div>\n                            </React.Fragment>\n                        ) : null\n                    }\n                    <Divider className=\"custom-sidebar-divider\" />\n                    <Search\n                        defaultValue={query.keyword || ''}\n                        placeholder=\"Tìm kiếm...\"\n                        onSearch={value => this.onSearch(value)}\n                    />\n                </Drawer>\n            </Header>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.authUser,\n        notifications: state.notification.notifications,\n        pagination: state.notification.pagination,\n        unread: state.notification.unread,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        logout: () => dispatch(logout()),\n        getAllNotifications: () => dispatch(getAllNotifications()),\n        countUnread: () => dispatch(countUnread()),\n        markAllAsRead: () => dispatch(markAllAsRead()),\n        markNotificationAsRead: (id) => dispatch(markNotificationAsRead(id))\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AppHeader));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { Layout, List, Avatar, Divider, Typography, Card } from 'antd';\nimport {\n    AppstoreTwoTone,\n    HeartTwoTone,\n    SnippetsTwoTone,\n    BookTwoTone\n} from '@ant-design/icons';\nimport FacebookLogin from 'react-facebook-login';\nimport GoogleLogin from 'react-google-login';\n// actions\nimport { signIn } from '../redux/actions/UserActions';\n\nconst { Sider } = Layout;\n\nclass AppSidebar extends Component {\n    state = {\n        isAuthenticated: false\n    }\n\n    responseFacebook = (response) => {\n        console.log(response);\n    }\n\n    responseGoogle = (response) => {\n        var data = {\n            auth_id: response.profileObj.googleId,\n            avatar: response.profileObj.imageUrl,\n            email: response.profileObj.email,\n            name: response.profileObj.name,\n            login_type: \"google\"\n        }\n\n        this.props.signIn(data);\n    }\n\n    render() {\n        var { user } = this.props;\n\n        var pathname = this.props.location.pathname;\n\n        if (user) {\n            return (\n                <Sider theme=\"light\" id=\"custom-sidebar\">\n                    <div className={`d-flex justify-content-start align-items-center sidebar-items ${pathname == `/users/${user._id}` ? 'sidebar-items-active' : ''}`}>\n                        <a className=\"text-none\" href={`/users/${user._id}`}>\n                            <Avatar src={user.avatar} size={20} />\n                            <Typography.Text className=\"mb-0 ml-2\">{user.name}</Typography.Text>\n                        </a>\n                    </div>\n                    <Divider className=\"sidebar-divider\" />\n                    <div className={`d-flex justify-content-start align-items-center sidebar-items ${pathname == `/` ? 'sidebar-items-active' : ''}`}>\n                        <Link to='/' className=\"text-none\">\n                            <AppstoreTwoTone twoToneColor=\"#2ecc71\" className=\"sidebar-icon\" />\n                            <Typography.Text className=\"mb-0 ml-2\">Trang chủ</Typography.Text>\n                        </Link>\n                    </div>\n                    <div className={`d-flex justify-content-start align-items-center sidebar-items ${pathname == `/history/liked` ? 'sidebar-items-active' : ''}`} >\n                        <Link to='/history/liked' className=\"text-none\">\n                            <HeartTwoTone twoToneColor=\"#dd1818\" className=\"sidebar-icon\" />\n                            <Typography.Text className=\"mb-0 ml-2\">Đã thích</Typography.Text>\n                        </Link>\n                    </div>\n                    <div className={`d-flex justify-content-start align-items-center sidebar-items ${pathname == `/history/downloaded` ? 'sidebar-items-active' : ''}`}>\n                        <Link to='/history/downloaded' className=\"text-none\">\n                            <SnippetsTwoTone twoToneColor=\"#d35400\" className=\"sidebar-icon\" />\n                            <Typography.Text className=\"mb-0 ml-2\">Lịch sử tải về</Typography.Text>\n                        </Link>\n                    </div>\n                    <div className={`d-flex justify-content-start align-items-center sidebar-items ${pathname == `/bookmarks` ? 'sidebar-items-active' : ''}`}>\n                        <Link to='/bookmarks' className=\"text-none\">\n                            <BookTwoTone twoToneColor=\"#3498db\" className=\"sidebar-icon\" />\n                            <Typography.Text className=\"mb-0 ml-2\">Lưu trữ</Typography.Text>\n                        </Link>\n                    </div>\n                </Sider>\n            )\n        } else {\n            return (\n                <Sider theme=\"light\" id=\"custom-sidebar\">\n                    <Card>\n                        <Typography.Title level={3}>Xin chào!</Typography.Title>\n                        <div>\n                            Bạn đang đến với BK Gallery, cộng đồng chia sẻ tài liệu dành cho sinh viên Bách Khoa Hà Nội.\n                            Hãy đăng nhập để có thể xem, thả cảm xúc bài viết, tải tài liệu và hơn thế nữa!\n                        </div>\n                        <Divider>Đăng nhập với</Divider>\n                        <div className=\"text-center\">\n                            <FacebookLogin\n                                appId=\"1951615681826197\"\n                                autoLoad={true}\n                                fields=\"name,email,picture\"\n                                callback={this.responseFacebook}\n                                textButton=\"Đăng nhập\"\n                                icon=\"fa-facebook\"\n                            />\n                            <div className=\"mt-1 mb-1\">hoặc</div>\n                            <GoogleLogin\n                                clientId=\"857631529122-33h9t3i8rgnnk2bghnvh8hr4fm088fp3.apps.googleusercontent.com\"\n                                buttonText=\"Đăng nhập\"\n                                onSuccess={this.responseGoogle}\n                                onFailure={this.responseGoogle}\n                                cookiePolicy={'single_host_origin'}\n                            />\n                        </div>\n                    </Card>\n                </Sider>\n            )\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.authUser\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        signIn: (data) => dispatch(signIn(data))\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AppSidebar));","import React, { Component } from 'react'\nimport { Layout } from 'antd';\n\nconst { Footer } = Layout;\n\nexport default class AppFooter extends Component {\n    render() {\n        return (\n            <Footer>\n                BKGallery ©2020\n            </Footer>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport AppHeader from './AppHeader';\nimport AppSidebar from './AppSidebar';\nimport AppFooter from './AppFooter';\nimport { Layout, BackTop } from 'antd';\nimport DynamicAntdTheme from 'dynamic-antd-theme';\n// actions\nimport { getAuthUser } from '../redux/actions/UserActions';\n\nconst { Content } = Layout;\n\nclass AppLayout extends Component {\n    async componentDidMount() {\n        await this.props.getAuthUser();\n    }\n\n    render() {\n        var { user } = this.props;\n\n        return (\n            <div>\n                <Layout>\n                    <AppHeader></AppHeader>\n                    <Content id=\"main-content-wrapper\" >\n                        <Layout>\n                            <AppSidebar user={user}></AppSidebar>\n                            <Content id=\"main-content\">\n                                {this.props.children}\n                            </Content>\n                        </Layout>\n                    </Content>\n                    <AppFooter></AppFooter>\n\n\n                </Layout>\n                <div style={{ visibility: 'hidden' }}>\n                    <DynamicAntdTheme primaryColor='#dd1818' />\n                </div>\n                <BackTop />\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.authUser\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getAuthUser: () => dispatch(getAuthUser())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppLayout);","import React, { Component } from 'react';\nimport Icon, {\n    LikeOutlined,\n    DislikeOutlined,\n    LikeTwoTone,\n    DislikeTwoTone,\n    LikeFilled,\n    DislikeFilled\n} from '@ant-design/icons';\nimport { Card, Avatar, Typography, Button, Divider, Popover } from 'antd';\nimport { ShakeVertical } from 'reshake'\n\nexport default class ReactionIcon extends Component {\n    state = {\n        visible: false,\n        type: 'like',\n        reacted: false\n    }\n\n    componentDidMount() {\n        this.setState({\n            type: this.props.type,\n            reacted: this.props.reacted,\n        })\n    }\n\n    onClickReactionIcon = (type) => {\n        let isRemove = false;\n        if(this.state.type == type && this.state.reacted) isRemove = true;\n\n        this.props.onReact(type, isRemove);\n \n        if(isRemove) {\n            // reset\n            this.setState({ \n                visible: false,\n                type: 'like',\n                reacted: false\n            })\n        } else {\n            // change to rest reaction\n            this.setState({ \n                visible: false,\n                type: type,\n                reacted: true\n            })\n        }\n    }\n\n    handleVisibleChange = visible => {\n        this.setState({ visible });\n    };\n\n    render() {\n        var { visible, type, reacted } = this.state;\n\n        // console.log(type)\n\n        let icon = null;\n        let text = \"Thích\";\n        let textColor = null;\n\n        if (type == 'like') {\n            if (reacted) {\n                icon = <LikeFilled style={{color: \"#3498db\"}} className=\"custom-card-actions\" />;\n                textColor = \"#3498db\";\n            }\n            else icon = <LikeOutlined className=\"custom-card-actions\" />\n        } else if (type == 'dislike') {\n            text = \"Không thích\";\n            if (reacted) {\n                icon = <DislikeFilled style={{color: \"#c0392b\"}} className=\"custom-card-actions\" />;\n                textColor = \"#c0392b\";\n            }\n            else icon = <DislikeOutlined className=\"custom-card-actions\" />\n        }\n\n        return (\n            <Popover\n                trigger={['hover', 'focus', 'click']}\n                visible={visible}\n                content={\n                    <div className=\"d-flex\">\n                        <ShakeVertical dur={1000} v={8}>\n                            <Button type=\"primary\" shape=\"circle\" size=\"small\"  onClick={() => this.onClickReactionIcon('like')}>\n                                <LikeOutlined twoToneColor=\"#3498db\" className=\"reaction-icons-1 like\" />\n                            </Button>\n                        </ShakeVertical>\n                        <Divider type=\"vertical\" />\n                        <ShakeVertical dur={1000} v={8}>\n                            <Button type=\"primary\" danger shape=\"circle\" size=\"small\"  onClick={() => this.onClickReactionIcon('dislike')}>\n                                <DislikeOutlined twoToneColor=\"#c0392b\" className=\"reaction-icons-1 dislike\" />\n                            </Button>\n                        </ShakeVertical>\n                    </div>\n                }\n                onVisibleChange={this.handleVisibleChange}\n            >\n                <div className=\"d-flex align-items-center justify-content-center\" onClick={() => this.onClickReactionIcon(type)}>\n                    {icon}\n                    <span className=\"ml-2 custom-card-actions-text\" style={{color: textColor}}>\n                        {reacted ? <strong>{text}</strong> : text}\n                    </span>\n                </div>\n            </Popover>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Comment, Tooltip } from 'antd';\nimport moment from 'moment';\nimport ReactHtmlParser from 'react-html-parser';\nimport { processTime } from '../../utils/helpers';\nimport { DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled } from '@ant-design/icons';\n// actions\nimport { reactComment } from '../../redux/actions/CommentActions';\n\nclass CommentItem extends Component {\n    state = {\n        likes: 0,\n        dislikes: 0,\n        type: null,\n        isShowReplies: false,\n        currentReplies: 0, // current replies number, use this variable for update propose \n    }\n\n    componentDidMount() {\n        let { comment } = this.props;\n        this.setState({\n            likes: comment.likes,\n            dislikes: comment.dislikes,\n            reaction: comment.reaction,\n            currentReplies: comment.child_comments.length,\n            isShowReplies: false || this.props.isShowAllComments\n        })\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        this.setState({isShowReplies: nextProps.isShowAllComments})\n    }\n\n    onReactComment(type) {\n        let isRemove = false;\n        let { likes, dislikes, reaction } = this.state;\n\n        if (reaction == type) isRemove = true;\n\n        this.props.reactComment({\n            comment: this.props.comment._id,\n            type: type,\n            isRemove: isRemove\n        });\n\n        if (isRemove) {\n            // reset\n            this.setState({\n                reaction: null,\n                likes: type == 'like' ? likes - 1 : likes,\n                dislikes: type == 'dislike' ? dislikes - 1 : dislikes,\n            })\n        } else {\n            // change to rest reaction\n            if (reaction) {\n                this.setState({\n                    reaction: type,\n                    likes: type == 'like' ? likes + 1 : likes - 1,\n                    dislikes: type == 'dislike' ? dislikes + 1 : dislikes - 1,\n                })\n            } else {\n                this.setState({\n                    reaction: type,\n                    likes: type == 'like' ? likes + 1 : likes,\n                    dislikes: type == 'dislike' ? dislikes + 1 : dislikes,\n                })\n            }\n\n        }\n    }\n\n    onReply() {\n        this.toggleShowReplies(true);\n        this.props.onReply();\n    }\n\n    toggleShowReplies() {\n        this.setState({isShowReplies: !this.state.isShowReplies})\n    }\n\n    render() {\n        var { comment, children } = this.props;\n        var { likes, dislikes, reaction, isShowReplies } = this.state;\n\n        return (\n            <Comment\n                actions={[\n                    <span key=\"comment-basic-like\" onClick={() => this.onReactComment('like')}>\n                        <Tooltip title=\"Thích\">\n                            {\n                                reaction == 'like' ? <LikeFilled style={{ color: \"#3498db\" }} /> : <LikeOutlined />\n                            }\n                        </Tooltip>\n                        <span className=\"comment-action\">{likes}</span>\n                    </span>,\n                    <span key=\"comment-basic-dislike\" onClick={() => this.onReactComment('dislike')}>\n                        <Tooltip title=\"Không thích\">\n                            {\n                                reaction == 'dislike' ? <DislikeFilled style={{ color: \"#c0392b\" }} /> : <DislikeOutlined />\n                            }\n                        </Tooltip>\n                        <span className=\"comment-action\">{dislikes}</span>\n                    </span>,\n                    <span key=\"comment-basic-reply-to\" onClick={() => this.onReply()}>Trả lời</span>,\n                    <span key=\"comment-basic-child\" onClick={() => this.toggleShowReplies()}>\n                        {comment.child_comments.length ? (<span>{isShowReplies ? \"Thu gọn\" : `Xem ${comment.child_comments.length} trả lời`}</span>) : null}\n                    </span>,\n                ]}\n                author={comment.user.name}\n                avatar={comment.user.avatar}\n                content={ReactHtmlParser(comment.content)}\n                datetime={processTime(comment.created_at)}\n            >\n                {\n                    isShowReplies ? children : null\n                }\n            </Comment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        reactComment: (data) => dispatch(reactComment(data)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentItem);","import api from '../../utils/api';\nimport {\n    CREATE_COMMENT,\n    GET_ALL_COMMENTS,\n    REACTION_COMMENT\n} from './types';\n\nexport const createComment = (data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.post('/comments', data).then(res => {\n            dispatch({ type: CREATE_COMMENT, payload: res.data });\n            resolve(res.data)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const getAllComments = (query) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.get('/comments', {params: query}).then(res => {\n            dispatch({ type: GET_ALL_COMMENTS, payload: res.data });\n            resolve(res.data)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const reactComment = (data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.post('/comments/reaction', data).then(res => {\n            dispatch({ type: REACTION_COMMENT, payload: res.data });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Comment, Tooltip, List, Button, Modal, Input, Typography } from 'antd';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport 'react-quill/dist/quill.bubble.css';\n\n// actions\nimport { getAllComments, createComment, reactComment } from '../../redux/actions/CommentActions';\nimport CommentItem from './CommentItem';\n\nclass CommentList extends Component {\n    state = {\n        isOpenCreateForm: false,\n        value: '',\n        comments: [],\n        currentComment: null,\n        isShowAllComments: false\n    }\n\n    componentDidMount() {\n        this.props.getAllComments({ post: this.props.post }).then(data => {\n            this.setState({ comments: data.comments })\n        })\n    }\n\n    onToggleModal(visible, comment = null) {\n        this.setState({ isOpenCreateForm: visible, currentComment: comment })\n    }\n\n    onChange(value) {\n        this.setState({ value })\n    }\n\n    submit(e) {\n        e.preventDefault();\n        let { value, currentComment, comments } = this.state;\n\n        this.props.createComment({\n            post: this.props.post,\n            content: value,\n            parent_comment: currentComment\n        }).then((data) => {\n            if (currentComment) {\n                let commentList = [...comments];\n                let index = commentList.findIndex(item => item._id.toString() == currentComment.toString());\n\n                commentList[index].child_comments = [\n                    ...commentList[index].child_comments,\n                    {\n                        ...data.comment,\n                        user: this.props.user,\n                        child_comments: []\n                    }\n                ]\n\n                this.setState({\n                    value: '',\n                    isOpenCreateForm: false,\n                    comments: commentList,\n                    currentComment: null\n                })\n            } else {\n                this.setState({\n                    value: '',\n                    isOpenCreateForm: false,\n                    comments: [\n                        ...this.state.comments,\n                        {\n                            ...data.comment,\n                            user: this.props.user,\n                            child_comments: []\n                        }\n                    ],\n                    currentComment: null\n                })\n            }\n        })\n    }\n\n    onToggleShowComments() {\n        this.setState({\n            isShowAllComments: !this.state.isShowAllComments,\n            collapseComment: true\n        })\n    }\n\n    render() {\n        var {user} = this.props;\n        var { isOpenCreateForm, value, comments, isShowAllComments } = this.state;\n\n        let displayedComments = isShowAllComments ? comments : comments.slice(Math.max(comments.length - 2, 0));\n\n        return (\n            <div className=\"comments\">\n                <div className=\"d-flex justify-content-between align-items-center\">\n                    {\n                        user ? (\n                            <Button type=\"link\" className=\"p-0\" onClick={() => this.onToggleModal(true)}>\n                                Thêm bình luận...\n                            </Button>\n                        ) : (\n                            <div></div>\n                        )\n                    }\n                    {\n                        comments.length ? (\n                            <React.Fragment>\n                                {\n                                    comments.length > 2 ? (\n                                        <div className=\"text-secondary toggle-comment-btn\" onClick={() => this.onToggleShowComments()}>\n                                            {isShowAllComments ? \"Thu gọn\" : `Xem ${comments.length} bình luận`}\n                                        </div>\n                                    ) : null\n                                }\n                            </React.Fragment>\n                        ) : (\n                                <div className=\"text-secondary\">Chưa có bình luận nào</div>\n                            )\n                    }\n                </div>\n                {\n                    displayedComments.length ? (\n                        <List\n                            className={`comment-list`}\n                            header={null}\n                            itemLayout=\"horizontal\"\n                            dataSource={displayedComments}\n                            renderItem={item => (\n                                <CommentItem key={item._id} comment={item} onReply={() => this.onToggleModal(true, item._id)} isShowAllComments={isShowAllComments}>\n                                    {\n                                        item.child_comments.length ? (\n                                            <List\n                                                className={`comment-list`}\n                                                header={null}\n                                                itemLayout=\"horizontal\"\n                                                dataSource={item.child_comments}\n                                                renderItem={child => (\n                                                    <CommentItem comment={child} onReply={() => this.onToggleModal(true, item._id)} />\n                                                )}\n                                            />\n                                        ) : null\n                                    }\n                                </CommentItem>\n                            )}\n                        />\n                    ) : null\n                }\n\n                <Modal\n                    visible={isOpenCreateForm}\n                    title=\"Thêm bình luận\"\n                    cancelText=\"Huỷ\"\n                    okText=\"Thêm\"\n                    onCancel={() => this.onToggleModal(false)}\n                    onOk={(e) => this.submit(e)}\n                >\n                    <div className=\"form-post mb-4\">\n                        <ReactQuill\n                            theme={\"bubble\"}\n                            placeholder=\"Viết bình luận của bạn ở đây...\"\n                            value={value}\n                            onChange={(value) => this.onChange(value)}\n                            modules={{}}\n                            formats={[\n                                'header',\n                                'bold', 'italic', 'underline', 'strike', 'blockquote',\n                                'list', 'bullet',\n                                'link', 'image'\n                            ]}\n                        />\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.authUser\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        createComment: (data) => dispatch(createComment(data)),\n        getAllComments: (query) => dispatch(getAllComments(query)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentList);","export default {\n    ROOT_URL: 'http://localhost:3001',\n    // ROOT_URL: 'https://bkgallery.github.io',\n    IMGUR_CLIENT_ID: \"b9f70cee0ea3e49\",\n    IMGUR_CLIENT_SECRET: \"d8b599ffbf07e907ab06ee1f99a8872ed6b73f00\"\n}","import api from '../../utils/api';\nimport {\n    CREATE_POST,\n    GET_ALL_POSTS,\n    REACTION_POST,\n    GET_POST_DETAIL,\n    DOWNLOAD_FILE,\n    UPDATE_POST_CONTENT,\n    BOOKMARK_POST,\n    REPORT_POST,\n    DELETE_POST,\n} from './types';\nimport FileSaver from 'file-saver';\n\nexport const createPost = (data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.post('/posts', data).then(res => {\n            dispatch({ type: CREATE_POST, payload: res.data.post });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const getAllPosts = (query) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.get('/posts', {params: query}).then(res => {\n            dispatch({ type: GET_ALL_POSTS, payload: res.data });\n            resolve(res.data)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const reactPost = (data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.post('/posts/reaction', data).then(res => {\n            dispatch({ type: REACTION_POST, payload: res.data });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const getPostDetail = (id) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.get(`/posts/${id}`).then(res => {\n            dispatch({ type: GET_POST_DETAIL, payload: res.data });\n            resolve(res.data)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const updatePostDetail = (id, data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.put(`/posts/${id}`, data).then(res => {\n            dispatch({ type: UPDATE_POST_CONTENT, payload: res.data });\n            resolve(res.data)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const downloadFile = (post) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.post('/posts/file', {post_id: post._id}, {responseType: 'blob',}).then(res => {\n            console.log(res.headers)\n            dispatch({ type: DOWNLOAD_FILE, payload: post._id });\n            FileSaver.saveAs(res.data, post.file_name);\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const bookmarkPost = (post_id) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.post('/posts/bookmark', {post_id: post_id}).then(res => {\n            dispatch({ type: BOOKMARK_POST, payload: post_id });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const reportPost = (data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.post('/posts/report', data).then(res => {\n            dispatch({ type: REPORT_POST, payload: res.data });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const deletePost = (id) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.delete(`/posts/${id}`).then(res => {\n            dispatch({ type: DELETE_POST, payload: id });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}","import api from '../../utils/api';\nimport {\n    CREATE_BOOKMARK,\n    GET_ALL_BOOKMARKS,\n    DELETE_BOOKMARK\n} from './types';\n\nexport const createBookmark = (data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.post('/bookmarks', data).then(res => {\n            dispatch({ type: CREATE_BOOKMARK, payload: res.data });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const getAllBookmarks = (query) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.get('/bookmarks', {params: query}).then(res => {\n            dispatch({ type: GET_ALL_BOOKMARKS, payload: res.data });\n            resolve(res.data)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const deleteBookmark = (id) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.delete(`/bookmarks/${id}`).then(res => {\n            dispatch({ type: DELETE_BOOKMARK, payload: id });\n            resolve(true)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Card, Avatar, Typography, Divider, Modal, notification, Popover, List, Radio } from 'antd';\nimport {\n    MessageOutlined,\n    ShareAltOutlined,\n    CloudDownloadOutlined,\n    FileProtectOutlined,\n    LikeTwoTone,\n    DislikeTwoTone,\n    ClockCircleOutlined,\n    LoadingOutlined,\n    EllipsisOutlined,\n    FormOutlined,\n    BookOutlined,\n    StopOutlined,\n    DeleteOutlined\n} from '@ant-design/icons';\nimport ReactionIcon from '../../components/ReactionIcon';\nimport ReactHtmlParser from 'react-html-parser';\nimport FbImageLibrary from 'react-fb-image-grid';\nimport { processTime } from '../../utils/helpers';\nimport { FacebookShareButton } from \"react-share\";\nimport CommentList from '../Comment';\nimport appConfig from '../../config';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport 'react-quill/dist/quill.bubble.css';\n// actions\nimport { reactPost, downloadFile, updatePostDetail, reportPost, deletePost } from '../../redux/actions/PostActions';\nimport { createBookmark } from '../../redux/actions/BookmarkActions';\n\nconst { Meta } = Card;\nconst { confirm } = Modal;\n\nconst radioStyle = {\n    display: 'block',\n    height: '30px',\n    lineHeight: '30px',\n};\n\nclass Post extends Component {\n    postMoreActions = [\n        {\n            icon: <BookOutlined />,\n            name: \"Lưu bài viết\",\n            action: () => this.onBookmark()\n        },\n        {\n            icon: <StopOutlined />,\n            name: \"Báo cáo bài viết này\",\n            action: () => this.toggleReportModal(true)\n        }\n    ]\n\n    state = {\n        isShowCommentList: true,\n        isLoadingDownload: false,\n        isOpenReportModal: false,\n        isOpenUpdateModal: false,\n        reportValue: null,\n        postContent: ''\n    }\n\n    componentDidMount() {\n        this.setState({\n            postContent: this.props.post.content\n        })\n\n        if (this.props.user && this.props.post.creator._id.toString() == this.props.user._id.toString()) {\n            this.postMoreActions = [\n                {\n                    icon: <FormOutlined />,\n                    name: \"Sửa nội dung bài viết\",\n                    action: () => this.toggleUpdateModal(true)\n                },\n                ...this.postMoreActions,\n                {\n                    icon: <DeleteOutlined />,\n                    name: \"Xoá bài viết này\",\n                    action: () => this.onDelete(true)\n                }\n            ]\n        }\n    }\n\n    /**\n     * \n     * @param {*} type like or dislike\n     * @param {*} isRemove remove current reaction or create new \n     */\n    onReact(type, isRemove) {\n        this.props.reactPost({\n            post: this.props.post._id,\n            type: type,\n            isRemove: isRemove\n        });\n    }\n\n    toggleShowComments() {\n        this.setState({\n            isShowCommentList: !this.state.isShowCommentList\n        })\n    }\n\n    onDownload() {\n        this.setState({ isLoadingDownload: true })\n\n        this.props.downloadFile(this.props.post).then(() => {\n            this.setState({ isLoadingDownload: false })\n        }).catch(err => {\n            this.setState({ isLoadingDownload: false })\n            notification.error({\n                message: 'Đã có lỗi xảy ra',\n                description: 'Vui lòng thử lại'\n            })\n        })\n    }\n\n    onBookmark() {\n        this.props.createBookmark({ post_id: this.props.post._id }).then(() => {\n            notification.success({\n                message: 'Đã lưu bài viết thành công'\n            })\n        }).catch(err => {\n            console.log(err)\n            notification.error({\n                message: 'Đã có lỗi xảy ra',\n                description: 'Vui lòng thử lại'\n            })\n        })\n    }\n\n    toggleReportModal(visible) {\n        this.setState({ isOpenReportModal: visible })\n    }\n\n    onChangeReportValue(e) {\n        this.setState({ reportValue: e.target.value });\n    }\n\n    onReport() {\n        confirm({\n            title: 'Cảnh báo',\n            content: 'Bạn chắc chắn muốn báo cáo bài viết này chứ?',\n            cancelText: 'Huỷ',\n            okText: 'OK',\n            onOk: () => {\n                this.props.reportPost({\n                    post_id: this.props.post._id,\n                    reason: this.state.reportValue\n                }).then(() => {\n                    this.toggleReportModal(false);\n                    notification.success({\n                        message: 'Đã báo cáo bài viết thành công'\n                    })\n                }).catch(err => {\n                    notification.error({\n                        message: 'Đã có lỗi xảy ra',\n                        description: 'Vui lòng thử lại'\n                    })\n                })\n            }\n        })\n    }\n\n    toggleUpdateModal(visible) {\n        this.setState({ isOpenUpdateModal: visible, postContent: this.props.post.content })\n    }\n\n    onChangePostContent(value) {\n        this.setState({ postContent: value });\n    }\n\n    onUpdate() {\n        confirm({\n            title: 'Cảnh báo',\n            content: 'Bạn chắc chắn muốn cập nhật bài viết này chứ?',\n            cancelText: 'Huỷ',\n            okText: 'OK',\n            onOk: () => {\n                this.props.updatePostDetail(this.props.post._id, {\n                    content: this.state.postContent\n                }).then(() => {\n                    this.toggleUpdateModal(false);\n                    notification.success({\n                        message: 'Đã cập nhật bài viết thành công'\n                    })\n                }).catch(err => {\n                    notification.error({\n                        message: 'Đã có lỗi xảy ra',\n                        description: 'Vui lòng thử lại'\n                    })\n                })\n            }\n        })\n    }\n\n    onDelete() {\n        confirm({\n            title: 'Cảnh báo',\n            content: 'Bạn chắc chắn muốn xoá bài viết này chứ?',\n            cancelText: 'Huỷ',\n            okText: 'OK',\n            onOk: () => {\n                this.props.deletePost(this.props.post._id).then(() => {\n                    notification.success({\n                        message: 'Đã xoá bài viết thành công'\n                    })\n                }).catch(err => {\n                    notification.error({\n                        message: 'Đã có lỗi xảy ra',\n                        description: 'Vui lòng thử lại'\n                    })\n                })\n            }\n        })\n    }\n\n    render() {\n        var { user, post, reaction, likeNumber, dislikeNumber, downloadNumber } = this.props;\n        var { isShowCommentList, isLoadingDownload, isOpenReportModal, isOpenUpdateModal, reportValue, postContent } = this.state;\n\n        var actionButtons = [\n            <ReactionIcon type={reaction || 'like'} reacted={reaction} onReact={(type, isRemove) => this.onReact(type, isRemove)} />,\n            <div className=\"d-flex align-items-center justify-content-center\" onClick={() => this.toggleShowComments()}>\n                <MessageOutlined key=\"comments\" className=\"custom-card-actions\" />\n                <span className=\"ml-2 custom-card-actions-text\">Bình luận</span>\n            </div>,\n            <div className=\"d-flex align-items-center justify-content-center\" >\n                <FacebookShareButton url={`${appConfig.ROOT_URL}/posts/${post._id}`}>\n                    <ShareAltOutlined key=\"share\" className=\"custom-card-actions\" />\n                    <span className=\"ml-2 custom-card-actions-text\">Chia sẻ</span>\n                </FacebookShareButton>\n            </div>\n        ];\n\n        if (post.file_id) {\n            actionButtons.push(\n                <div className=\"d-flex align-items-center justify-content-center\" onClick={() => this.onDownload()}>\n                    {isLoadingDownload ? <LoadingOutlined key=\"download\" className=\"custom-card-actions\" /> : <CloudDownloadOutlined key=\"download\" className=\"custom-card-actions\" />}\n                    <span className=\"ml-2 custom-card-actions-text\">Tải về</span>\n                </div>\n            )\n        }\n\n        if (!user) {\n            actionButtons = [\n                <div className=\"d-flex align-items-center justify-content-center\" onClick={() => this.toggleShowComments()}>\n                    <MessageOutlined key=\"comments\" className=\"custom-card-actions\" />\n                    <span className=\"ml-2 custom-card-actions-text\">Bình luận</span>\n                </div>,\n                <div className=\"d-flex align-items-center justify-content-center\" >\n                    <FacebookShareButton url={`${appConfig.ROOT_URL}/posts/${post._id}`}>\n                        <ShareAltOutlined key=\"share\" className=\"custom-card-actions\" />\n                        <span className=\"ml-2 custom-card-actions-text\">Chia sẻ</span>\n                    </FacebookShareButton>\n                </div>\n            ]\n        }\n\n        return (\n            <div className=\"single-post\">\n                <Card\n                    actions={actionButtons}\n                >\n                    <div className=\"d-flex justify-content-between align-items-lg-start\">\n                        <Meta\n                            avatar={\n                                <a href={`/users/${post.creator._id}`}>\n                                    <Avatar src={post.creator.avatar} size={47} />\n                                </a>\n                            }\n                            title={\n                                <a className=\"text-none\" href={`/users/${post.creator._id}`}>\n                                    <Typography.Text strong>{post.creator.name}</Typography.Text>\n                                </a>\n                            }\n                            description={\n                                <Link className=\"text-secondary\" to={`/posts/${post._id}`}>\n                                    <small><ClockCircleOutlined /> {processTime(post.updated_at)}</small>\n                                </Link>\n                            }\n                        />\n                        {\n                            user ? (\n                                <div>\n                                    <Popover\n                                        placement=\"bottom\"\n                                        content={\n                                            <List\n                                                size=\"small\"\n                                                header={null}\n                                                footer={null}\n                                                bordered={false}\n                                                dataSource={this.postMoreActions}\n                                                renderItem={item => (\n                                                    <List.Item onClick={item.action} className=\"item-action-btn\">{item.icon} {item.name}</List.Item>\n                                                )}\n                                            />\n                                        }\n                                        title={null}\n                                    >\n                                        <EllipsisOutlined className=\"post-more-action-btn\" />\n                                    </Popover>\n                                </div>\n                            ) : null\n                        }\n                    </div>\n                    <div className=\"mt-3\">\n                        {ReactHtmlParser(post.content)}\n                    </div>\n                    {\n                        post.file_id ? (\n                            <Card className=\"mt-3\">\n                                <div className=\"d-flex justify-content-start align-items-center\">\n                                    <FileProtectOutlined style={{ fontSize: '40px' }} />\n                                    <div className=\"ml-4\">\n                                        <h5>{post.file_name}</h5>\n                                        <small></small>\n                                    </div>\n                                </div>\n                            </Card>\n                        ) : null\n                    }\n                    {\n                        post.images.length ? (\n                            <div className=\"post-images\">\n                                <FbImageLibrary\n                                    images={post.images}\n                                    countFrom={3}\n                                    renderOverlay={() => \"Xem ảnh\"}\n                                />\n                            </div>\n                        ) : null\n                    }\n                    <div className=\"d-flex justify-content-between align-items-center mt-3\">\n                        <div className=\"d-flex justify-content-start align-items-center\">\n                            <LikeTwoTone twoToneColor=\"#3498db\" />\n                            <span className=\"ml-1\">{likeNumber}</span>\n                            <Divider type=\"vertical\" />\n                            <DislikeTwoTone twoToneColor=\"#c0392b\" />\n                            <span className=\"ml-1\">{dislikeNumber}</span>\n                        </div>\n                        <div>\n                            {downloadNumber ? `${downloadNumber} lượt tải về` : null}\n                        </div>\n                    </div>\n                </Card>\n                {\n                    isShowCommentList ? (<CommentList className=\"comments\" post={post._id} />) : null\n                }\n\n                {/* Report modal */}\n                <Modal\n                    visible={isOpenReportModal}\n                    onOk={() => this.onReport()}\n                    onCancel={() => this.toggleReportModal(false)}\n                    title=\"Báo cáo bài viết\"\n                    okText=\"Gửi báo cáo\"\n                    cancelText=\"Huỷ\"\n                >\n                    <Radio.Group onChange={(e) => this.onChangeReportValue(e)} value={reportValue}>\n                        <Radio style={radioStyle} value={'not_relevant'}>\n                            Nội dung bài viết không liên quan tới học tập\n                        </Radio>\n                        <Radio style={radioStyle} value={'corrupt_file\u001c'}>\n                            Không thể tải file\n                        </Radio>\n                        <Radio style={radioStyle} value={'spam'}>\n                            Bài viết spam\n                        </Radio>\n                        <Radio style={radioStyle} value={'fake_news'}>\n                            Thông tin sai lệch\n                        </Radio>\n                    </Radio.Group>\n                </Modal>\n                {/* Update modal */}\n                <Modal\n                    visible={isOpenUpdateModal}\n                    onOk={() => this.onUpdate()}\n                    onCancel={() => this.toggleUpdateModal(false)}\n                    title=\"Sửa bài viết\"\n                    okText=\"Cập nhật\"\n                    cancelText=\"Huỷ\"\n                >\n                    <div className=\"form-post\">\n                        <ReactQuill\n                            theme={\"snow\"}\n                            placeholder=\"Bạn muốn chia sẻ điều gì?\"\n                            value={postContent}\n                            onChange={(value) => this.onChangePostContent(value)}\n                            modules={\n                                {\n                                    toolbar: [\n                                        [{ 'header': [1, 2, 3, 4, false] }],\n                                        ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n                                        [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n                                        ['link']\n                                    ],\n                                }\n                            }\n                            formats={[\n                                'header',\n                                // {\n                                //     name: \"h1\",\n                                //     definition: { tag: \"H1\", prepare: \"heading\", type: \"line\" }\n                                // },\n                                // {\n                                //     name: \"h2\",\n                                //     definition: { tag: \"H2\", prepare: \"heading\", type: \"line\" }\n                                // },\n                                // {\n                                //     name: \"h3\",\n                                //     definition: { tag: \"H3\", prepare: \"heading\", type: \"line\" }\n                                // }\n                                'bold', 'italic', 'underline', 'strike', 'blockquote',\n                                'list', 'bullet',\n                                'link', 'image'\n                            ]}\n                        />\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.authUser\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        reactPost: (data) => dispatch(reactPost(data)),\n        downloadFile: (post) => dispatch(downloadFile(post)),\n        updatePostDetail: (id, data) => dispatch(updatePostDetail(id, data)),\n        reportPost: (data) => dispatch(reportPost(data)),\n        deletePost: (id) => dispatch(deletePost(id)),\n        createBookmark: (data) => dispatch(createBookmark(data)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);","import axios from 'axios';\nimport config from '../config';\n\nexport function uploadImage(file) {\n    var data = new FormData();\n    data.append('image', file);\n    data.set('type', 'file');\n\n    return new Promise((resolve, reject) => {\n        return axios.post(\n            `https://api.imgur.com/3/image`,\n            data,\n            {\n                headers: {\n                    Authorization: `Client-ID ${config.IMGUR_CLIENT_ID}`\n                },\n                'mimeType': 'multipart/form-data',\n            }\n        ).then(res => {\n            console.log(res.data);\n            resolve(res.data.data.link);\n        }).catch(err => {\n            console.log(err);\n            resolve(null);\n        })\n    })\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, Divider, Button, Upload, notification, Modal } from 'antd';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport 'react-quill/dist/quill.bubble.css';\nimport {\n    PictureTwoTone,\n    FileTwoTone\n} from '@ant-design/icons';\nimport { uploadImage } from '../../utils/imgur';\n// actions\nimport { createPost } from '../../redux/actions/PostActions';\n\n\nclass PostForm extends Component {\n    state = {\n        isLoading: false,\n        isFocused: false,\n        value: \"\",\n        fileList: [],\n        imageList: [],\n        postType: 'normal' // 3 types: normal, image, file\n    }\n\n    onChange(value) {\n        this.setState({ value })\n    }\n\n    onFocusEditor(range, source, editor) {\n        this.setState({ isFocused: true })\n    }\n\n    onBlurEditor(range, source, editor) {\n        this.setState({ isFocused: false })\n    }\n\n    onChangeImage = ({ file, fileList }) => {\n        if (file.status !== 'uploading') {\n            this.setState({\n                imageList: fileList,\n                fileList: [],\n                postType: fileList.length ? 'image' : 'normal'\n            })\n        }\n    }\n\n    onChangeFile = ({ file, fileList }) => {\n        if(file.size >= 5000000) {\n            notification.warning({\n                message: 'Cảnh báo',\n                description: 'Không thể upload file có dung lượng lớn hơn 5MB'\n            });\n\n            this.setState({\n                imageList: [],\n                fileList: [],\n                postType: 'normal'\n            })\n        } else {\n            if (file.status !== 'uploading') {\n                this.setState({\n                    imageList: [],\n                    fileList: fileList,\n                    postType: fileList.length ? 'file' : 'normal'\n                })\n            }\n        }\n    }\n\n    async onSubmit(e) {\n        e.preventDefault();\n        this.setState({isLoading: true});\n\n        var { fileList, imageList, value } = this.state;\n\n        if (!value) {\n            notification.error({\n                message: 'Lỗi',\n                description: 'Bạn chưa thêm nội dung bài viết'\n            });\n        } else {\n            var submitData = new FormData();\n            submitData.set('content', value);\n    \n            if (fileList.length) {\n                let file = fileList[0].originFileObj;\n    \n                submitData.append('file', file);\n                submitData.set('fileName', file.name);\n                submitData.set('fileType', file.type);\n            }\n    \n            if (imageList.length) {\n                var requests = imageList.map(item => {\n                    return uploadImage(item.originFileObj)\n                });\n    \n                var images = await Promise.all(requests);\n                images = images.filter(item => item); // filter null image\n    \n                submitData.set('images', JSON.stringify(images));\n            }\n    \n            this.props.createPost(submitData).then(() => {\n                this.setState({\n                    imageList: [],\n                    fileList: [],\n                    postType: 'normal',\n                    isFocused: false,\n                    value: \"\",\n                    isLoading: false\n                })\n            }).catch(err => {\n                notification.error({\n                    message: 'Lỗi',\n                    description: err.response.data.message\n                });\n                this.setState({\n                    isLoading: false\n                })\n            })\n        }\n    }\n\n    render() {\n        var { value, isFocused, fileList, imageList, postType, isLoading } = this.state;\n\n        var modules = {\n            toolbar: [\n                [{ 'header': [1, 2, 3, 4, false] }],\n                ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n                [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n                ['link']\n            ],\n        }\n\n        var formats = [\n            'header',\n            // {\n            //     name: \"h1\",\n            //     definition: { tag: \"H1\", prepare: \"heading\", type: \"line\" }\n            // },\n            // {\n            //     name: \"h2\",\n            //     definition: { tag: \"H2\", prepare: \"heading\", type: \"line\" }\n            // },\n            // {\n            //     name: \"h3\",\n            //     definition: { tag: \"H3\", prepare: \"heading\", type: \"line\" }\n            // }\n            'bold', 'italic', 'underline', 'strike', 'blockquote',\n            'list', 'bullet',\n            'link', 'image'\n        ]\n\n        return (\n            <Card className=\"form-post mb-4\">\n                <ReactQuill\n                    theme={isFocused ? \"snow\" : \"bubble\"}\n                    placeholder=\"Bạn muốn chia sẻ điều gì?\"\n                    value={value}\n                    onChange={(value) => this.onChange(value)}\n                    modules={modules}\n                    formats={formats}\n                    onFocus={(range, source, editor) => this.onFocusEditor(range, source, editor)}\n                // onBlur={(range, source, editor) => this.onBlurEditor(range, source, editor)}\n                />\n                <Divider />\n                <small><i>Lưu ý: Bạn chỉ có thể upload ảnh hoặc file. Không thể upload cả hai cùng lúc.</i></small>\n                <div className=\"d-flex justify-content-between align-items-start mt-2\">\n                    <div className=\"d-flex justify-content-start align-items-center\" id=\"upload-buttons\">\n                        {\n                            postType != 'file' ? (\n                                <Upload\n                                    onChange={this.onChangeImage}\n                                    accept=\"image/*\"\n                                    multiple\n                                    beforeUpload={file => {\n                                        this.setState(state => ({\n                                            imageList: [...state.imageList, file],\n                                        }));\n                                        return false;\n                                    }}\n                                    fileList={imageList}\n                                    listType=\"picture\"\n                                >\n                                    <Button shape=\"round\" icon={<PictureTwoTone />}>Ảnh</Button>\n                                </Upload>\n                            ) : null\n                        }\n                        {\n                            postType != 'image' ? (\n                                <Upload\n                                    onChange={this.onChangeFile}\n                                    beforeUpload={({ file }) => {\n                                        this.setState({\n                                            fileList: [file]\n                                        })\n                                        return false;\n                                    }}\n                                    fileList={fileList}\n                                >\n                                    <Button className=\"ml-2\" shape=\"round\" icon={<FileTwoTone />}>File</Button>\n                                </Upload>\n                            ) : null\n                        }\n                    </div>\n                    <Button loading={isLoading} type=\"primary\" shape=\"round\" onClick={(e) => this.onSubmit(e)}>Đăng</Button>\n                </div>\n            </Card>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        createPost: (data) => dispatch(createPost(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\n\nexport default class MetaTags extends Component {\n    render() {\n        var { title, ogTitle } = this.props;\n\n        return (\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>{title}</title>\n                <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n                <meta name=\"description\" content=\"Cộng đồng chia sẻ tài liệu học tập sinh viên Bách Khoa Hà Nội\" />\n                <meta name=\"keywords\" content=\"Bách Khoa,BK Gallery,bk gallery,bk,bkhn\" />\n                <meta name=\"author\" content=\"zero2603\" />\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n                <meta property=\"og:title\" content={ogTitle} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:url\" content=\"https://bkgallery.github.io/\" />\n                <meta property=\"og:image\" content=\"https://thoxaydung.xyz/og_image.jpg\" />\n                <meta property=\"og:description\" content=\"BK Gallery là cộng đồng chia sẻ tài liệu học tập sinh viên Bách Khoa Hà Nội\" />\n            </Helmet>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Card, Tooltip } from 'antd';\n\nexport default class RightSidebar extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"fb-page\" data-href=\"https://www.facebook.com/bkgallery.fanpage/\" data-tabs=\"\" data-width=\"\" data-height=\"\" data-small-header=\"false\" data-adapt-container-width=\"true\" data-hide-cover=\"false\" data-show-facepile=\"true\">\n                    <blockquote cite=\"https://www.facebook.com/bkgallery.fanpage/\" className=\"fb-xfbml-parse-ignore\">\n                        <a href=\"https://www.facebook.com/bkgallery.fanpage/\">BK Gallery</a>\n                    </blockquote>\n                </div>\n                <Card\n                    className=\"mt-4\"\n                    hoverable\n                    cover={\n                        <Tooltip title=\"Ảnh: Trần Ngọc Sơn\">\n                            <img alt=\"BKHN\" src={require('../../assets/img/card_1.jpg')} className=\"img-card\" />\n                        </Tooltip>\n                    }\n                >\n                    <Card.Meta\n                        title=\"BK Gallery\"\n                        description={\n                            <div>\n                                <p>\n                                Với mục đích ban đầu là nơi tổng hợp và chia sẻ tài liệu đại cương cho sinh viên\n                                đại học Bách Khoa Hà Nội, hiện tại BK Gallery chuyển hướng sang là một cộng đồng\n                                chia sẻ tài liệu, giúp đỡ lẫn nhau cùng tiến bộ.\n                                </p>\n                                <p>\n                                Được tạo ra từ năm 2016, tới nay BK Gallery đã trở thành trang web chia sẻ tài liệu \n                                lớn nhất và uy tín đối với sinh viên Bách Khoa Hà Nội.\n                                </p>\n                            </div>\n                        }\n                    />\n                </Card>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, Spin, Skeleton, Row, Col, Alert } from 'antd';\nimport Post from '../../components/Post';\nimport PostForm from '../../components/Form/PostForm';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport MetaTags from '../../components/MetaTags';\nimport qs from 'qs';\nimport { cleanObject } from '../../utils/helpers';\nimport RightSidebar from '../../components/RightSidebar';\n// actions\nimport { getAllPosts } from '../../redux/actions/PostActions';\n\n\nclass Home extends Component {\n    state = {\n        isLoading: true,\n    }\n\n    componentDidMount() {\n        let query = qs.parse(this.props.location.search.slice(1));\n        query = cleanObject(query);\n\n        this.props.getAllPosts(query).then(() => {\n            this.setState({ isLoading: false })\n        })\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        console.log(nextProps.location.search, this.props.location.search)\n        if (nextProps.location.search !== this.props.location.search) {\n\n            let query = qs.parse(nextProps.location.search.slice(1));\n            query = cleanObject(query);\n\n            this.props.getAllPosts(query).then(() => {\n                this.setState({ isLoading: false })\n            })\n        }\n    }\n\n    fetchMorePosts() {\n        let query = qs.parse(this.props.location.search.slice(1));\n        query = cleanObject(query);\n\n        this.props.getAllPosts({ ...query, page: this.props.pagination.current + 1 });\n    }\n\n    render() {\n        var { isLoading } = this.state;\n        var { user, posts, pagination } = this.props;\n\n        return (\n            <React.Fragment>\n                <MetaTags\n                    title=\"BK Gallery\"\n                    ogTitle=\"BK Gallery | Cộng đồng chia sẻ tài liệu học tập sinh viên Bách Khoa Hà Nội\"\n                />\n\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n\n                    <Col xs={24} sm={24} md={24} lg={15} xl={15}>\n                        {\n                            user ? <PostForm /> : null\n                        }\n                        {\n                            isLoading ? (\n                                <React.Fragment>\n                                    {\n                                        [1, 2, 3, 4, 5].map(item => (\n                                            <Card\n                                                key={item}\n                                                className=\"single-post\"\n                                            >\n                                                <Skeleton avatar paragraph={{ rows: 4 }} />\n                                            </Card>\n                                        ))\n                                    }\n                                </React.Fragment>\n                            ) : (\n                                    <InfiniteScroll\n                                        dataLength={pagination.perPage * pagination.current}\n                                        next={() => this.fetchMorePosts()}\n                                        hasMore={pagination.current < pagination.totalPages}\n                                        loader={<div className=\"text-center\"><Spin size=\"large\" /></div>}\n                                    >\n                                        {\n                                            posts.map((post, index) => {\n                                                return (\n                                                    <Post\n                                                        post={post}\n                                                        reaction={post.reaction}\n                                                        likeNumber={post.likes}\n                                                        dislikeNumber={post.dislikes}\n                                                        downloadNumber={post.downloads}\n                                                        key={post._id}\n                                                    />\n                                                )\n                                            })\n                                        }\n                                    </InfiniteScroll>\n                                )\n                        }\n                    </Col>\n                    <Col xs={24} sm={24} md={24} lg={9} xl={9}>\n                        <Alert \n                            className=\"mb-4\"\n                            message=\"Lưu ý\" \n                            type=\"info\" \n                            showIcon \n                            closable \n                            description=\"Kích cỡ file tải lên tối đa là 5MB\"\n                        />\n                        <RightSidebar/>\n                    </Col>\n                </Row>\n            </React.Fragment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.authUser,\n        posts: state.post.posts,\n        pagination: state.post.pagination,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getAllPosts: (query) => dispatch(getAllPosts(query))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, Skeleton, Row, Col, Empty } from 'antd';\nimport Post from '../../components/Post';\nimport MetaTags from '../../components/MetaTags';\nimport RightSidebar from '../../components/RightSidebar';\n// actions\nimport { getPostDetail } from '../../redux/actions/PostActions';\n\nclass PostDetail extends Component {\n    state = {\n        isLoading: true,\n    }\n\n    componentDidMount() {\n        this.props.getPostDetail(this.props.match.params.id).then(() => {\n            this.setState({ isLoading: false })\n        })\n    }\n\n    render() {\n        var { isLoading } = this.state;\n        var { post } = this.props;\n\n        return (\n            <React.Fragment>\n                <MetaTags\n                    title={post ? `Bài viết của ${post.creator.name}` : \"Bài viết trên BK Gallery\"}\n                    ogTitle={post ? \n                        `BK Gallery - Bài viết của ${post.creator.name} | Cộng đồng chia sẻ tài liệu học tập sinh viên Bách Khoa Hà Nội` \n                        : 'BK Gallery - Bài viết | Cộng đồng chia sẻ tài liệu học tập sinh viên Bách Khoa Hà Nội'\n                    }\n                />\n\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                    <Col xs={24} sm={24} md={24} lg={15} xl={15}>\n                        {\n                            isLoading ? (\n                                <Card className=\"single-post\">\n                                    <Skeleton avatar paragraph={{ rows: 4 }} />\n                                </Card>\n                            ) : (\n                                <React.Fragment>\n                                    {\n                                        post ? (\n                                            <Post\n                                                post={post}\n                                                reaction={post.reaction}\n                                                likeNumber={post.likes}\n                                                dislikeNumber={post.dislikes}\n                                                downloadNumber={post.downloads}\n                                            />\n                                        ) : (\n                                            <Card className=\"single-post\">\n                                                <Empty description=\"Không tìm thấy bài viết\" />\n                                            </Card>\n                                        )\n                                    }\n                                </React.Fragment>\n                                )\n                        }\n                    </Col>\n                    <Col xs={24} sm={24} md={24} lg={9} xl={9}>\n                        <RightSidebar />\n                    </Col>\n                </Row>\n            </React.Fragment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        post: state.post.currentPost\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getPostDetail: (id) => dispatch(getPostDetail(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostDetail);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Comment, Tooltip, List, Button, Modal, Input, Form, Divider } from 'antd';\n// actions\nimport { updateUserDetail } from '../../redux/actions/UserActions';\n\nclass UserForm extends Component {\n    onSubmit = (values) => {\n        this.props.updateUserDetail(this.props.user._id, values).then(() => {\n            this.props.onCancel();\n        })\n    }\n\n    render() {\n        var { visible, user, onCancel } = this.props;\n\n        return (\n            <Modal\n                visible={visible}\n                title=\"Cập nhật thông tin user\"\n                onCancel={() => onCancel()}\n                footer={null}\n            >\n                <Form\n                    layout=\"vertical\"\n                    initialValues={user}\n                    onFinish={this.onSubmit}\n                >\n                    <Form.Item\n                        name=\"name\"\n                        label=\"Tên của bạn\"\n                        rules={[\n                            { required: true, message: \"Vui lòng điền tên của bạn\" }\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"description\"\n                        label=\"Mô tả ngắn về bản thân\"\n                        rules={[\n                            { required: false, message: \"Vui lòng điền mô tả\" }\n                        ]}\n                    >\n                        <Input.TextArea />\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type=\"default\" onClick={() => onCancel()}>Huỷ</Button>\n                        <Divider type=\"vertical\" />\n                        <Button type=\"primary\" htmlType=\"submit\">Cập nhật</Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        // user: state.user.authUser\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        updateUserDetail: (id, data) => dispatch(updateUserDetail(id, data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserForm);","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { Card, Skeleton, Row, Col, Carousel, Spin, Avatar, Typography, Button, Divider, Upload, Tooltip, notification } from 'antd';\nimport Post from '../../components/Post';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport {\n    MessageOutlined,\n    EditOutlined,\n    ShareAltOutlined,\n    LoadingOutlined\n} from '@ant-design/icons';\nimport FbImageLibrary from 'react-fb-image-grid';\nimport moment from 'moment';\nimport UserForm from './UserForm';\nimport MetaTags from '../../components/MetaTags';\nimport { FacebookShareButton } from \"react-share\";\nimport appConfig from '../../config';\nimport PostForm from '../../components/Form/PostForm';\nimport { uploadImage } from '../../utils/imgur';\nimport RightSidebar from '../../components/RightSidebar';\n// actions\nimport { getUserDetail, updateUserDetail } from '../../redux/actions/UserActions';\nimport { getAllPosts } from '../../redux/actions/PostActions';\n\nclass User extends Component {\n    uploadRef = React.createRef();\n\n    state = {\n        isLoading: true,\n        isUpdateAvatarLoading: false,\n        isOpenUpdateForm: false,\n    }\n\n    async componentDidMount() {\n        await this.props.getUserDetail(this.props.match.params.id);\n        await this.props.getAllPosts({ creator: this.props.match.params.id });\n\n        this.setState({ isLoading: false })\n    }\n\n    fetchMorePosts() {\n        this.props.getAllPosts({ page: this.props.pagination.current + 1 });\n    }\n\n    toggleUpdateForm(visible) {\n        this.setState({ isOpenUpdateForm: visible })\n    }\n\n    openChangeAvatar() {\n        this.uploadRef.current.click()\n    }\n\n    async onChangeAvatar(file) {\n        this.setState({isUpdateAvatarLoading: true})\n        if (file.status !== 'uploading') {\n            var result = await uploadImage(file);\n\n            this.props.updateUserDetail(this.props.authUser._id, { avatar: result }).then(() => {\n                this.setState({isUpdateAvatarLoading: false})\n                notification.success({\n                    message: 'Đã cập nhật avatar thành công'\n                })\n            }).catch(() => {\n                this.setState({isUpdateAvatarLoading: false})\n                notification.error({\n                    message: 'Lỗi',\n                    description: \"Đã có lỗi xảy ra. Vui lòng thử lại,\"\n                })\n            })\n        }\n    }\n\n    render() {\n        var { isLoading, isUpdateAvatarLoading, isOpenUpdateForm } = this.state;\n        var { match, user, authUser, posts, pagination } = this.props;\n\n        if (isLoading) {\n            return (\n                <div className=\"text-center\">\n                    <Spin size=\"large\" />\n                </div>\n            )\n        }\n\n        var isMyProfile = false; // authUser == currentUser => isMyProfile = true\n        if(authUser && match.params.id == authUser._id.toString()) isMyProfile = true;\n\n        return (\n            <React.Fragment>\n                <MetaTags\n                    title={user ? user.name : \"BK Gallery\"}\n                    ogTitle={user ? `${user.name} trên BK Gallery` : \"BK Gallery | Cộng đồng chia sẻ tài liệu học tập sinh viên Bách Khoa Hà Nội\"}\n                />\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                    <Col xs={24} sm={24} md={24} lg={15} xl={15}>\n                        <div className=\"user-header-wrapper\">\n                            <Carousel autoplay>\n                                {\n                                    [1, 2, 3, 4, 5].map(item => (\n                                        <div key={item}>\n                                            <img src={require(`../../assets/img/cover_${item}.jpg`)} className=\"cover-img\" />\n                                        </div>\n                                    ))\n                                }\n                            </Carousel>\n                            {\n                                isMyProfile ? (\n                                    <Tooltip title=\"Cập nhật ảnh đại diện\">\n                                        <Avatar src={user.avatar} size={120} className=\"user-avatar\" onClick={() => this.openChangeAvatar()} />\n                                    </Tooltip>\n                                ) : (\n                                        <Avatar src={user.avatar} size={120} className=\"user-avatar\" />\n                                    )\n                            }\n                            <Card className=\"user-info\">\n                                <Typography.Title level={3} >{user.name}</Typography.Title>\n                                <div>\n                                    <MessageOutlined /><span className=\"ml-3\">{user.description ? user.description : \"Chưa có mô tả\"}</span>\n                                </div>\n                                <div>\n                                    {isUpdateAvatarLoading ? <Button type=\"link\" className=\"p-0 mr-2\"><LoadingOutlined /></Button> : null}\n                                    {\n                                        isMyProfile ? (\n                                            <React.Fragment>\n                                                <Button className=\"p-0\" type=\"link\" icon={<EditOutlined />} onClick={() => this.toggleUpdateForm(true)}>\n                                                    Sửa thông tin cá nhân\n                                                </Button>\n                                                <Divider type=\"vertical\" />\n                                            </React.Fragment>\n                                        ) : null\n                                    }\n                                    <FacebookShareButton url={`${appConfig.ROOT_URL}/users/${user._id}`}>\n                                        <Button className=\"p-0\" type=\"link\" icon={<ShareAltOutlined />}>\n                                            Chia sẻ\n                                        </Button>\n                                    </FacebookShareButton>\n                                </div>\n                            </Card>\n                        </div>\n                        <div className=\"user-posts\">\n                            {\n                                isMyProfile ? <PostForm /> : null\n                            }\n                            <InfiniteScroll\n                                dataLength={pagination.perPage * pagination.current}\n                                next={() => this.fetchMorePosts()}\n                                hasMore={pagination.current < pagination.totalPages}\n                                loader={<div className=\"text-center\"><Spin size=\"large\" /></div>}\n                            >\n                                {\n                                    posts.map((post, index) => {\n                                        return (\n                                            <Post\n                                                post={post}\n                                                reaction={post.reaction}\n                                                likeNumber={post.likes}\n                                                dislikeNumber={post.dislikes}\n                                                downloadNumber={post.downloads}\n                                                key={post._id}\n                                            />\n                                        )\n                                    })\n                                }\n                            </InfiniteScroll>\n                        </div>\n                    </Col>\n                    <Col xs={24} sm={24} md={24} lg={9} xl={9}>\n                        <Card className=\"user-images-card mb-4\">\n                            <div className=\"user-images-title\">\n                                <Typography.Title level={4} >Hình ảnh của {user.name}</Typography.Title>\n                            </div>\n                            <div className=\"post-images\">\n                                <FbImageLibrary\n                                    images={user.images}\n                                    countFrom={4}\n                                    renderOverlay={() => \"Xem ảnh\"}\n                                />\n                            </div>\n                        </Card>\n                        <RightSidebar />\n                    </Col>\n                    <UserForm\n                        visible={isOpenUpdateForm}\n                        onCancel={() => this.toggleUpdateForm(false)}\n                        user={user}\n                    />\n                </Row>\n                <Upload\n                    accept=\"image/*\"\n                    multiple={false}\n                    beforeUpload={file => {\n                        return false;\n                    }}\n                    listType=\"picture\"\n                    fileList={null}\n                    onChange={({ file, fileList }) => this.onChangeAvatar(file)}\n                >\n                    <div ref={this.uploadRef}></div>\n                </Upload>\n            </React.Fragment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.currentUser,\n        authUser: state.user.authUser,\n        posts: state.post.posts,\n        pagination: state.post.pagination,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getUserDetail: (id) => dispatch(getUserDetail(id)),\n        updateUserDetail: (id, data) => dispatch(updateUserDetail(id, data)),\n        getAllPosts: (query) => dispatch(getAllPosts(query))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { List, Avatar, Button, Pagination, Card, Empty, Typography, Modal, notification, Spin, Divider } from 'antd';\nimport { cleanObject, processTime } from '../../utils/helpers';\nimport Truncate from 'react-truncate';\nimport qs from 'qs';\nimport {\n    isBrowser,\n    isMobile\n} from \"react-device-detect\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n// actions\nimport { getAllBookmarks, createBookmark, deleteBookmark } from '../../redux/actions/BookmarkActions';\n\nconst { confirm } = Modal;\n\nclass Bookmark extends Component {\n    state = {\n        isLoading: true\n    }\n\n    componentDidMount() {\n        let query = qs.parse(this.props.location.search.slice(1));\n        this.props.getAllBookmarks(query).then(() => {\n            this.setState({ isLoading: false })\n        })\n    }\n\n    // use for mobile only\n    fetchMore() {\n        this.props.getAllBookmarks({ page: this.props.pagination.current + 1 })\n    }\n\n    // use for desktop only\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (nextProps.location.search !== this.props.location.search) {\n            var query = qs.parse(nextProps.location.search.slice(1));\n            this.setState({ isLoading: true });\n            this.props.getAllBookmarks(query).then(() => {\n                setTimeout(() => {\n                    this.setState({\n                        isLoading: false\n                    })\n                }, 800)\n            });\n        }\n    }\n\n    onChangeFilter(name, value) {\n        this.setState({ isLoading: true });\n        let query = qs.parse(this.props.location.search.slice(1));\n        query = {\n            ...query,\n            [name]: value\n        }\n        cleanObject(query);\n\n        this.props.history.push({\n            pathname: '/bookmarks',\n            search: qs.stringify(query)\n        });\n    }\n\n    onDelete(id) {\n        confirm({\n            title: 'Cảnh báo',\n            content: 'Bạn chắc chắn muốn xoá mục đã lưu chứ?',\n            cancelText: 'Huỷ',\n            okText: 'OK',\n            onOk: () => {\n                this.props.deleteBookmark(id).then(() => {\n                    notification.success({\n                        message: 'Đã xoá thành công'\n                    })\n                }).catch(err => {\n                    notification.error({\n                        message: 'Đã có lỗi xảy ra',\n                        description: 'Vui lòng thử lại'\n                    })\n                })\n            }\n        })\n    }\n\n    render() {\n        var { user, bookmarks, pagination } = this.props;\n\n        return (\n            <div>\n                {\n                    bookmarks.length ? (\n                        <Card>\n                            <Typography.Title level={2}>Bài viết đã lưu</Typography.Title>\n                            {\n                                isBrowser ? (\n                                    <div>\n                                        <List\n                                            itemLayout=\"horizontal\"\n                                            dataSource={bookmarks}\n                                            renderItem={item => (\n                                                <List.Item\n                                                    actions={[\n                                                        <Link to={`/posts/${item.post._id}`}>\n                                                            <Button type=\"link\" className=\"p-0\">Xem bài viết</Button>\n                                                        </Link>,\n                                                        <Button onClick={() => this.onDelete(item._id)} type=\"link\" danger className=\"p-0\">Xoá</Button>\n                                                    ]}\n                                                >\n                                                    <List.Item.Meta\n                                                        avatar={\n                                                            <Avatar src={item.post.creator.avatar} />\n                                                        }\n                                                        title={\n                                                            <a className=\"text-none\" href={`/users/${item.post.creator._id}`}>{item.post.creator.name}</a>\n                                                        }\n                                                        description={\n                                                            <React.Fragment>\n                                                                <Truncate lines={2} ellipsis={<span>...</span>}>\n                                                                    {item.post.content}\n                                                                </Truncate>\n                                                                <div><i> Đã lưu vào lúc {processTime(item.created_at)}</i></div>\n                                                            </React.Fragment>\n                                                        }\n                                                    />\n                                                </List.Item>\n                                            )}\n                                        />\n\n                                        <div className=\"text-right mt-4\">\n                                            <Pagination\n                                                {...pagination}\n                                                pageSize={pagination.perPage}\n                                                onChange={(page, pageSize) => this.onChangeFilter('page', page)}\n                                            />\n                                        </div>\n                                    </div>\n                                ) : null\n                            }\n                            {\n                                isMobile ? (\n                                    <InfiniteScroll\n                                        className=\"notification-list\"\n                                        dataLength={pagination.perPage * pagination.current}\n                                        next={() => this.fetchMore()}\n                                        hasMore={pagination.current < pagination.totalPages}\n                                        loader={<div className=\"text-center\"><Spin size=\"large\" /></div>}\n                                    >\n                                        {\n                                            bookmarks.map(item => (\n                                                <List.Item className=\"bookmark-mobile-items d-flex justify-content-start flex-column align-content-start\" >\n                                                    <List.Item.Meta\n                                                        className=\"w-100\"\n                                                        avatar={\n                                                            <Avatar src={item.post.creator.avatar} />\n                                                        }\n                                                        title={\n                                                            <a className=\"text-none\" href={`/users/${item.post.creator._id}`}>{item.post.creator.name}</a>\n                                                        }\n                                                        description={\n                                                            <React.Fragment>\n                                                                <Truncate lines={2} ellipsis={<span>...</span>}>\n                                                                    {item.post.content}\n                                                                </Truncate>\n                                                                <div><small><i>Đã lưu vào lúc {processTime(item.created_at)}</i></small></div>\n                                                            </React.Fragment>\n                                                        }\n                                                    />\n                                                    <div className=\"w-100\">\n                                                        <Link to={`/posts/${item.post._id}`}>\n                                                            <Button type=\"link\" className=\"p-0\">Xem bài viết</Button>\n                                                        </Link>\n                                                        <Divider type=\"vertical\" />\n                                                        <Button onClick={() => this.onDelete(item._id)} type=\"link\" danger className=\"p-0\">Xoá</Button>\n                                                    </div>\n                                                    \n                                                </List.Item>\n                                            ))\n                                        }\n                                    </InfiniteScroll>\n                                ) : null\n                            }\n                        </Card>\n                    ) : (\n                            <Card>\n                                <Typography.Title level={2}>Bài viết đã lưu</Typography.Title>\n                                <Empty description=\"Không có dữ liệu\" />\n                            </Card>\n                        )\n                }\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.authUser,\n        bookmarks: state.bookmark.bookmarks,\n        pagination: state.bookmark.pagination,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getAllBookmarks: (query) => dispatch(getAllBookmarks(query)),\n        createBookmark: (data) => dispatch(createBookmark(data)),\n        deleteBookmark: (id) => dispatch(deleteBookmark(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bookmark);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { List, Avatar, Card, Empty, Typography, Modal, Button, Spin, Tooltip, Badge } from 'antd';\nimport { cleanObject, processTime } from '../../utils/helpers';\nimport {\n    LikeOutlined,\n    DislikeOutlined,\n    MessageOutlined,\n    SisternodeOutlined\n} from '@ant-design/icons'\nimport qs from 'qs';\nimport {\n    isBrowser,\n    isMobile\n} from \"react-device-detect\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n// actions\nimport { getAllNotifications, countUnread, markAllAsRead, markNotificationAsRead } from '../../redux/actions/NotificationActions';\n\nconst { confirm } = Modal;\n\nclass Notification extends Component {\n    state = {\n        isLoading: true\n    }\n\n    componentDidMount() {\n        this.props.getAllNotifications().then(() => {\n            this.setState({ isLoading: false })\n        })\n    }\n\n    fetchMoreNotifications() {\n        this.props.getAllNotifications({ page: this.props.pagination.current + 1 });\n    }\n\n    render() {\n        var { user, notifications, pagination, unread } = this.props;\n\n        return (\n            <div>\n                {\n                    notifications.length ? (\n                        <Card>\n                            <Typography.Title level={2}>Thông báo {unread ? `(${unread})` : null}</Typography.Title>\n                            <Button type=\"link\" className=\"p-0\" onClick={() => this.props.markAllAsRead()}>Đánh dấu tất cả đã đọc</Button>\n                            {\n                                isMobile ? (\n                                    <InfiniteScroll\n                                        dataLength={pagination.perPage * pagination.current}\n                                        next={() => this.fetchMoreNotifications()}\n                                        hasMore={pagination.current < pagination.totalPages}\n                                        loader={<div className=\"text-center\"><Spin size=\"large\" /></div>}\n                                    >\n                                        {\n                                            notifications.map(item => {\n                                                let content = '';\n                                                let icon = null;\n                                                if (item.type == \"like\") {\n                                                    icon = <LikeOutlined />;\n                                                    if (item.comment) content = `${item.creator.name} đã thích bình luận của bạn`;\n                                                    else content = `${item.creator.name} đã thích bài viết của bạn`;\n                                                } else if (item.type == 'dislike') {\n                                                    icon = <DislikeOutlined />;\n                                                    if (item.comment) content = `${item.creator.name} không thích bình luận của bạn`;\n                                                    else content = `${item.creator.name} không thích bài viết của bạn`;\n                                                } else if (item.type == 'comment') {\n                                                    icon = <MessageOutlined />;\n                                                    content = `${item.creator.name} đã bình luận về bài viết bạn đang theo dõi`;\n                                                } else if (item.type == 'reply') {\n                                                    icon = <SisternodeOutlined />;\n                                                    content = `${item.creator.name} đã trả lời bình luận mà bạn đang tham gia hoặc theo dõi`;\n                                                }\n\n                                                return (\n                                                    <List.Item key={item._id} className={`d-flex justify-content-between align-items-center notification-items`}>\n                                                        <List.Item.Meta\n                                                            avatar={<Avatar src={item.creator.avatar} />}\n                                                            title={<a className=\"text-none notification-content\" href={`/posts/${item.post._id}`}>{content}</a>}\n                                                            description={<div>{icon} <small>{processTime(item.created_at)}</small></div>}\n                                                        />\n                                                        {item.is_read ? (\n                                                            <Tooltip title=\"Đã đọc\">\n                                                                <Badge status=\"default\" />\n                                                            </Tooltip>\n                                                        ) : (\n                                                                <Tooltip title=\"Đánh dấu đã đọc\">\n                                                                    <div onClick={() => this.props.markNotificationAsRead(item._id)}>\n                                                                        <Badge color=\"#d0021a\" />\n                                                                    </div>\n                                                                </Tooltip>\n                                                            )\n                                                        }\n                                                    </List.Item>\n                                                )\n                                            })\n                                        }\n                                    </InfiniteScroll>\n                                ) : (\n                                    <Empty description=\"Chỉ xem được trên điện thoại\" />\n                                )\n                            }\n                        </Card>\n                    ) : (\n                            <Card>\n                                <Typography.Title level={2}>Bài viết đã lưu</Typography.Title>\n                                <Empty description=\"Không có dữ liệu\" />\n                            </Card>\n                        )\n                }\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.authUser,\n        notifications: state.notification.notifications,\n        pagination: state.notification.pagination,\n        unread: state.notification.unread,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getAllNotifications: () => dispatch(getAllNotifications()),\n        countUnread: () => dispatch(countUnread()),\n        markAllAsRead: () => dispatch(markAllAsRead()),\n        markNotificationAsRead: (id) => dispatch(markNotificationAsRead(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { List, Avatar, Button, Pagination, Card, Empty, Typography, Modal, notification, Spin, Divider } from 'antd';\nimport { cleanObject, processTime } from '../../utils/helpers';\nimport Truncate from 'react-truncate';\nimport qs from 'qs';\nimport {\n    isBrowser,\n    isMobile\n} from \"react-device-detect\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n// actions\nimport { getListLiked } from '../../redux/actions/HistoryActions';\n\nconst Item = ({ item, ...props }) => (\n    <List.Item {...props}>\n        <List.Item.Meta\n            avatar={\n                <Avatar src={item.creator.avatar} />\n            }\n            title={\n                <a className=\"text-none\" href={`/users/${item.creator._id}`}>{item.creator.name}</a>\n            }\n            description={\n                <div>\n                    <Truncate lines={2} ellipsis={<span>...</span>}>\n                        {item.content}\n                    </Truncate>\n                    <div><i> Bài viết được tạo lúc {processTime(item.created_at)}</i></div>\n                    <a href={`/posts/${item._id}`}>\n                        <Button type=\"link\" className=\"p-0\">Xem bài viết</Button>\n                    </a>\n                </div>\n            }\n        />\n    </List.Item>\n)\n\nclass LikedPosts extends Component {\n    state = {\n        isLoading: true\n    }\n\n    componentDidMount() {\n        let query = qs.parse(this.props.location.search.slice(1));\n        this.props.getListLiked(query).then(() => {\n            this.setState({ isLoading: false })\n        })\n    }\n\n    // use for mobile only\n    fetchMorePosts() {\n        this.props.getListLiked({ page: this.props.pagination.current + 1 })\n    }\n\n    // use for desktop only\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (nextProps.location.search !== this.props.location.search) {\n            var query = qs.parse(nextProps.location.search.slice(1));\n            this.setState({ isLoading: true });\n            this.props.getListLiked(query).then(() => {\n                setTimeout(() => {\n                    this.setState({\n                        isLoading: false\n                    })\n                }, 800)\n            });\n        }\n    }\n\n    onChangeFilter(name, value) {\n        this.setState({ isLoading: true });\n        let query = qs.parse(this.props.location.search.slice(1));\n        query = {\n            ...query,\n            [name]: value\n        }\n        cleanObject(query);\n\n        this.props.history.push({\n            pathname: '/history/liked',\n            search: qs.stringify(query)\n        });\n    }\n\n    render() {\n        var { user, posts, pagination } = this.props;\n        var { isLoading } = this.state;\n\n        if (isLoading) {\n            return (\n                <div className=\"text-center\">\n                    <Spin size=\"large\" />\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {\n                    posts.length ? (\n                        <Card>\n                            <Typography.Title level={2}>Bài viết đã thích</Typography.Title>\n                            {\n                                isBrowser ? (\n                                    <div>\n                                        <List\n                                            itemLayout=\"horizontal\"\n                                            dataSource={posts}\n                                            renderItem={item => (\n                                                <Item item={item} key={item._id} />\n                                            )}\n                                        />\n\n                                        <div className=\"text-right mt-4\">\n                                            <Pagination\n                                                {...pagination}\n                                                pageSize={pagination.perPage}\n                                                onChange={(page, pageSize) => this.onChangeFilter('page', page)}\n                                            />\n                                        </div>\n                                    </div>\n                                ) : null\n                            }\n                            {\n                                isMobile ? (\n                                    <InfiniteScroll\n                                        className=\"notification-list\"\n                                        dataLength={pagination.perPage * pagination.current}\n                                        next={() => this.fetchMorePosts()}\n                                        hasMore={pagination.current < pagination.totalPages}\n                                        loader={<div className=\"text-center\"><Spin size=\"large\" /></div>}\n                                    >\n                                        {\n                                            posts.map(item => (\n                                                <Item item={item} key={item._id} />\n                                            ))\n                                        }\n                                    </InfiniteScroll>\n                                ) : null\n                            }\n                        </Card>\n                    ) : (\n                            <Card>\n                                <Typography.Title level={2}>Bài viết đã thích</Typography.Title>\n                                <Empty description=\"Không có dữ liệu\" />\n                            </Card>\n                        )\n                }\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.authUser,\n        posts: state.history.liked.posts,\n        pagination: state.history.liked.pagination,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getListLiked: (query) => dispatch(getListLiked(query)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LikedPosts);","import api from '../../utils/api';\nimport {\n    GET_LIST_LIKED,\n    GET_LIST_DOWNLOADED\n} from './types';\n\nexport const getListLiked = (query = {}) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.get(`/posts/liked`, {params: query}).then(res => {\n            dispatch({ type: GET_LIST_LIKED, payload: res.data });\n            resolve(res.data)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}\n\nexport const getListDownloaded = (query = {}) => dispatch => {\n    return new Promise((resolve, reject) => {\n        return api.get(`/posts/downloaded`, {params: query}).then(res => {\n            dispatch({ type: GET_LIST_DOWNLOADED, payload: res.data });\n            resolve(res.data)\n        }).catch(err => {\n            console.error(err.response);\n            reject(err);\n        })\n    })\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { List, Avatar, Button, Pagination, Card, Empty, Typography, Modal, notification, Spin, Divider } from 'antd';\nimport { cleanObject, processTime } from '../../utils/helpers';\nimport {\n    FileProtectOutlined\n} from '@ant-design/icons'\nimport qs from 'qs';\nimport {\n    isBrowser,\n    isMobile\n} from \"react-device-detect\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n// actions\nimport { getListDownloaded } from '../../redux/actions/HistoryActions';\n\nconst Item = ({ item, ...props }) => (\n    <List.Item {...props}>\n        <List.Item.Meta\n            avatar={\n                <Avatar size={50} icon={<FileProtectOutlined  />} style={{ backgroundColor: '#d00219' }} />\n            }\n            title={item.file_name}\n            description={\n                <div>\n                    <div><i>Người tải lên: <a className=\"text-none\" href={`/users/${item.creator._id}`}>{item.creator.name}</a></i></div>\n                    <div><i>Bài viết được tạo lúc {processTime(item.created_at)}</i></div>\n                    <a href={`/posts/${item._id}`}>\n                        <Button type=\"link\" className=\"p-0\">Xem bài viết gốc</Button>\n                    </a>\n                </div>\n            }\n        />\n    </List.Item>\n)\n\nclass Downloaded extends Component {\n    state = {\n        isLoading: true\n    }\n\n    componentDidMount() {\n        let query = qs.parse(this.props.location.search.slice(1));\n        this.props.getListDownloaded(query).then(() => {\n            this.setState({ isLoading: false })\n        })\n    }\n\n    // use for mobile only\n    fetchMorePosts() {\n        this.props.getListDownloaded({ page: this.props.pagination.current + 1 })\n    }\n\n    // use for desktop only\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (nextProps.location.search !== this.props.location.search) {\n            var query = qs.parse(nextProps.location.search.slice(1));\n            this.setState({ isLoading: true });\n            this.props.getListDownloaded(query).then(() => {\n                this.setState({\n                    isLoading: false\n                })\n            });\n        }\n    }\n\n    onChangeFilter(name, value) {\n        this.setState({ isLoading: true });\n        let query = qs.parse(this.props.location.search.slice(1));\n        query = {\n            ...query,\n            [name]: value\n        }\n        cleanObject(query);\n\n        this.props.history.push({\n            pathname: '/history/downloaded',\n            search: qs.stringify(query)\n        });\n    }\n\n    render() {\n        var { user, posts, pagination } = this.props;\n        var { isLoading } = this.state;\n\n        if (isLoading) {\n            return (\n                <div className=\"text-center\">\n                    <Spin size=\"large\" />\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {\n                    posts.length ? (\n                        <Card>\n                            <Typography.Title level={2}>Lịch sử tải về</Typography.Title>\n                            {\n                                isBrowser ? (\n                                    <div>\n                                        <List\n                                            itemLayout=\"horizontal\"\n                                            dataSource={posts}\n                                            renderItem={item => (\n                                                <Item item={item} key={item._id} />\n                                            )}\n                                        />\n\n                                        <div className=\"text-right mt-4\">\n                                            <Pagination\n                                                {...pagination}\n                                                pageSize={pagination.perPage}\n                                                onChange={(page, pageSize) => this.onChangeFilter('page', page)}\n                                            />\n                                        </div>\n                                    </div>\n                                ) : null\n                            }\n                            {\n                                isMobile ? (\n                                    <InfiniteScroll\n                                        className=\"notification-list\"\n                                        dataLength={pagination.perPage * pagination.current}\n                                        next={() => this.fetchMorePosts()}\n                                        hasMore={pagination.current < pagination.totalPages}\n                                        loader={<div className=\"text-center\"><Spin size=\"large\" /></div>}\n                                    >\n                                        {\n                                            posts.map(item => (\n                                                <Item item={item} key={item._id} />\n                                            ))\n                                        }\n                                    </InfiniteScroll>\n                                ) : null\n                            }\n                        </Card>\n                    ) : (\n                            <Card>\n                                <Typography.Title level={2}>Lịch sử tải về</Typography.Title>\n                                <Empty description=\"Không có dữ liệu\" />\n                            </Card>\n                        )\n                }\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user.authUser,\n        posts: state.history.downloaded.posts,\n        pagination: state.history.downloaded.pagination,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getListDownloaded: (query) => dispatch(getListDownloaded(query)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Downloaded);","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './home';\nimport Post from './post';\nimport User from './user';\nimport Bookmark from './bookmark';\nimport Notification from './notification';\nimport LikedPosts from './history/LikedPosts';\nimport Downloaded from './history/Downloaded';\n\nconst routes = [\n    {\n        path: '/',\n        component: Home\n    },\n    {\n        path: '/posts/:id',\n        component: Post\n    },\n    {\n        path: '/users/:id',\n        component: User\n    },\n    {\n        path: '/bookmarks',\n        component: Bookmark\n    },\n    {\n        path: '/notifications',\n        component: Notification\n    },\n    {\n        path: '/history/liked',\n        component: LikedPosts\n    },\n    {\n        path: '/history/downloaded',\n        component: Downloaded\n    },\n]\n\nexport default class Routes extends Component {\n    render() {\n        return (\n            <Switch>\n                {\n                    routes.map((route, index) => (\n                        <Route exact path={route.path} component={route.component} key={index} />\n                    ))\n                }\n            </Switch>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport AppLayout from './layouts';\nimport Routes from './routes';\n// css\nimport 'antd/dist/antd.css';\nimport './assets/css/custom.css';\nimport './assets/css/bootstrap.min.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter basename='/'>\n          <AppLayout>\n            <Routes />\n          </AppLayout>\n        </BrowserRouter>\n      </Provider>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}